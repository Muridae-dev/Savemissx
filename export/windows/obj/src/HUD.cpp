// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_HUD
#include <HUD.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBarFillDirection
#include <flixel/ui/FlxBarFillDirection.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f77237052cf31132_76_new,"HUD","new",0xf45a2509,"HUD.new","HUD.hx",76,0xe7d70e87)
HX_DEFINE_STACK_FRAME(_hx_pos_f77237052cf31132_29_new,"HUD","new",0xf45a2509,"HUD.new","HUD.hx",29,0xe7d70e87)
HX_LOCAL_STACK_FRAME(_hx_pos_f77237052cf31132_83_updateHUD,"HUD","updateHUD",0xbe04cb97,"HUD.updateHUD","HUD.hx",83,0xe7d70e87)

void HUD_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_GC_STACKFRAME(&_hx_pos_f77237052cf31132_76_new)
HXLINE(  76)			spr->scrollFactor->set((int)0,(int)0);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_f77237052cf31132_29_new)
HXLINE(  30)		super::__construct(null());
HXLINE(  32)		this->_sprBack =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,(int)20,(int)-16777216,true,null());
HXLINE(  33)		this->_sprBack->set_alpha((int)0);
HXLINE(  37)		this->_barHP =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,(int)0,(int)2,::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn(),(int)50,(int)15,null(),null(),(int)0,(int)3,null());
HXLINE(  38)		this->_barHP->createFilledBar((int)-11140346,(int)-5696486,true,(int)1716912902);
HXLINE(  39)		this->_barHP->set_value((int)3);
HXLINE(  42)		this->_barRage =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,(int)0,(int)2,::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn(),(int)100,(int)15,null(),null(),(int)0,(int)500,null());
HXLINE(  43)		this->_barRage->createFilledBar((int)-11140346,(int)-5696486,true,(int)1716912902);
HXLINE(  44)		this->_barRage->set_value((int)0);
HXLINE(  45)		this->_barRage->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(  48)		this->_txtHealth =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)16,(int)2,(int)0,HX_("3 / 3",95,2f,ba,72),(int)8,null());
HXLINE(  49)		{
HXLINE(  49)			 ::flixel::text::FlxText _this = this->_txtHealth;
HXDLIN(  49)			_this->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::SHADOW_dyn());
HXDLIN(  49)			_this->set_borderColor((int)-8355712);
HXDLIN(  49)			_this->set_borderSize((int)1);
HXDLIN(  49)			_this->set_borderQuality((int)1);
            		}
HXLINE(  50)		this->_txtMoney =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)2,(int)0,HX_("0",30,00,00,00),(int)8,null());
HXLINE(  51)		{
HXLINE(  51)			 ::flixel::text::FlxText _this1 = this->_txtMoney;
HXDLIN(  51)			_this1->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::SHADOW_dyn());
HXDLIN(  51)			_this1->set_borderColor((int)-8355712);
HXDLIN(  51)			_this1->set_borderSize((int)1);
HXDLIN(  51)			_this1->set_borderQuality((int)1);
            		}
HXLINE(  52)		this->_txtRage =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)2,(int)0,HX_("RAGE",8d,0f,65,36),(int)8,null());
HXLINE(  53)		this->_txtRage->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(  54)		{
HXLINE(  54)			 ::flixel::text::FlxText _this2 = this->_txtMoney;
HXDLIN(  54)			_this2->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::SHADOW_dyn());
HXDLIN(  54)			_this2->set_borderColor((int)-8355712);
HXDLIN(  54)			_this2->set_borderSize((int)1);
HXDLIN(  54)			_this2->set_borderQuality((int)1);
            		}
HXLINE(  57)		Float _hx_tmp = this->_txtHealth->y;
HXDLIN(  57)		this->_sprHealth =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)4,((_hx_tmp + ((Float)this->_txtHealth->get_height() / (Float)(int)2)) - (int)4),HX_("assets/images/health.png",42,7f,55,20));
HXLINE(  58)		int _hx_tmp1 = (::flixel::FlxG_obj::width - (int)12);
HXDLIN(  58)		Float _hx_tmp2 = this->_txtMoney->y;
HXDLIN(  58)		this->_sprMoney =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,_hx_tmp1,((_hx_tmp2 + ((Float)this->_txtMoney->get_height() / (Float)(int)2)) - (int)4),HX_("assets/images/coin.png",f7,e9,c5,54));
HXLINE(  60)		this->_txtMoney->set_alignment(HX_("right",dc,0b,64,e9));
HXLINE(  61)		 ::flixel::text::FlxText _hx_tmp3 = this->_txtMoney;
HXDLIN(  61)		Float _hx_tmp4 = this->_sprMoney->x;
HXDLIN(  61)		_hx_tmp3->set_x(((_hx_tmp4 - this->_txtMoney->get_width()) - (int)4));
HXLINE(  63)		this->_barHP->set_x((int)15);
HXLINE(  64)		 ::flixel::text::FlxText _hx_tmp5 = this->_txtHealth;
HXDLIN(  64)		_hx_tmp5->set_x((this->_barHP->x + (int)12));
HXLINE(  66)		this->add(this->_barHP);
HXLINE(  67)		this->add(this->_barRage);
HXLINE(  68)		this->add(this->_sprBack);
HXLINE(  69)		this->add(this->_sprHealth);
HXLINE(  70)		this->add(this->_sprMoney);
HXLINE(  71)		this->add(this->_txtHealth);
HXLINE(  72)		this->add(this->_txtMoney);
HXLINE(  73)		this->add(this->_txtRage);
HXLINE(  74)		this->forEach( ::Dynamic(new _hx_Closure_0()),null());
            	}

Dynamic HUD_obj::__CreateEmpty() { return new HUD_obj; }

void *HUD_obj::_hx_vtable = 0;

Dynamic HUD_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< HUD_obj > _hx_result = new HUD_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool HUD_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0036ec97) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0036ec97;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x3634c52c;
	}
}

void HUD_obj::updateHUD(hx::Null< int >  __o_Health,hx::Null< int >  __o_Money,hx::Null< int >  __o_Rage){
int Health = __o_Health.Default(0);
int Money = __o_Money.Default(0);
int Rage = __o_Rage.Default(0);
            	HX_STACKFRAME(&_hx_pos_f77237052cf31132_83_updateHUD)
HXLINE(  84)		this->_barHP->set_value(Health);
HXLINE(  85)		this->_barRage->set_value(Rage);
HXLINE(  87)		 ::flixel::text::FlxText _hx_tmp = this->_txtHealth;
HXDLIN(  87)		_hx_tmp->set_text((::Std_obj::string(Health) + HX_(" / 3",e2,99,4a,15)));
HXLINE(  88)		 ::flixel::text::FlxText _hx_tmp1 = this->_txtMoney;
HXDLIN(  88)		_hx_tmp1->set_text(::Std_obj::string(Money));
HXLINE(  89)		 ::flixel::text::FlxText _hx_tmp2 = this->_txtMoney;
HXDLIN(  89)		Float _hx_tmp3 = this->_sprMoney->x;
HXDLIN(  89)		_hx_tmp2->set_x(((_hx_tmp3 - this->_txtMoney->get_width()) - (int)4));
            	}


HX_DEFINE_DYNAMIC_FUNC3(HUD_obj,updateHUD,(void))


hx::ObjectPtr< HUD_obj > HUD_obj::__new() {
	hx::ObjectPtr< HUD_obj > __this = new HUD_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< HUD_obj > HUD_obj::__alloc(hx::Ctx *_hx_ctx) {
	HUD_obj *__this = (HUD_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(HUD_obj), true, "HUD"));
	*(void **)__this = HUD_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

HUD_obj::HUD_obj()
{
}

void HUD_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(HUD);
	HX_MARK_MEMBER_NAME(_sprBack,"_sprBack");
	HX_MARK_MEMBER_NAME(_sprHealth,"_sprHealth");
	HX_MARK_MEMBER_NAME(_sprMoney,"_sprMoney");
	HX_MARK_MEMBER_NAME(_txtHealth,"_txtHealth");
	HX_MARK_MEMBER_NAME(_txtMoney,"_txtMoney");
	HX_MARK_MEMBER_NAME(_txtRage,"_txtRage");
	HX_MARK_MEMBER_NAME(_barHP,"_barHP");
	HX_MARK_MEMBER_NAME(_barRage,"_barRage");
	 ::flixel::group::FlxTypedGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void HUD_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_sprBack,"_sprBack");
	HX_VISIT_MEMBER_NAME(_sprHealth,"_sprHealth");
	HX_VISIT_MEMBER_NAME(_sprMoney,"_sprMoney");
	HX_VISIT_MEMBER_NAME(_txtHealth,"_txtHealth");
	HX_VISIT_MEMBER_NAME(_txtMoney,"_txtMoney");
	HX_VISIT_MEMBER_NAME(_txtRage,"_txtRage");
	HX_VISIT_MEMBER_NAME(_barHP,"_barHP");
	HX_VISIT_MEMBER_NAME(_barRage,"_barRage");
	 ::flixel::group::FlxTypedGroup_obj::__Visit(HX_VISIT_ARG);
}

hx::Val HUD_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_barHP") ) { return hx::Val( _barHP ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_sprBack") ) { return hx::Val( _sprBack ); }
		if (HX_FIELD_EQ(inName,"_txtRage") ) { return hx::Val( _txtRage ); }
		if (HX_FIELD_EQ(inName,"_barRage") ) { return hx::Val( _barRage ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_sprMoney") ) { return hx::Val( _sprMoney ); }
		if (HX_FIELD_EQ(inName,"_txtMoney") ) { return hx::Val( _txtMoney ); }
		if (HX_FIELD_EQ(inName,"updateHUD") ) { return hx::Val( updateHUD_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_sprHealth") ) { return hx::Val( _sprHealth ); }
		if (HX_FIELD_EQ(inName,"_txtHealth") ) { return hx::Val( _txtHealth ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val HUD_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_barHP") ) { _barHP=inValue.Cast<  ::flixel::ui::FlxBar >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_sprBack") ) { _sprBack=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_txtRage") ) { _txtRage=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_barRage") ) { _barRage=inValue.Cast<  ::flixel::ui::FlxBar >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_sprMoney") ) { _sprMoney=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_txtMoney") ) { _txtMoney=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_sprHealth") ) { _sprHealth=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_txtHealth") ) { _txtHealth=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void HUD_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_sprBack","\x7d","\x43","\x6d","\x7f"));
	outFields->push(HX_HCSTRING("_sprHealth","\x72","\x13","\x50","\xda"));
	outFields->push(HX_HCSTRING("_sprMoney","\x2a","\x7c","\xdf","\x5e"));
	outFields->push(HX_HCSTRING("_txtHealth","\xed","\xfa","\xff","\xc9"));
	outFields->push(HX_HCSTRING("_txtMoney","\x0f","\x5d","\x74","\xb1"));
	outFields->push(HX_HCSTRING("_txtRage","\x9e","\x33","\x3e","\x0d"));
	outFields->push(HX_HCSTRING("_barHP","\xdc","\x92","\xa0","\xa9"));
	outFields->push(HX_HCSTRING("_barRage","\x81","\x64","\xb9","\xc7"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo HUD_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(HUD_obj,_sprBack),HX_HCSTRING("_sprBack","\x7d","\x43","\x6d","\x7f")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(HUD_obj,_sprHealth),HX_HCSTRING("_sprHealth","\x72","\x13","\x50","\xda")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(HUD_obj,_sprMoney),HX_HCSTRING("_sprMoney","\x2a","\x7c","\xdf","\x5e")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(HUD_obj,_txtHealth),HX_HCSTRING("_txtHealth","\xed","\xfa","\xff","\xc9")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(HUD_obj,_txtMoney),HX_HCSTRING("_txtMoney","\x0f","\x5d","\x74","\xb1")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(HUD_obj,_txtRage),HX_HCSTRING("_txtRage","\x9e","\x33","\x3e","\x0d")},
	{hx::fsObject /*::flixel::ui::FlxBar*/ ,(int)offsetof(HUD_obj,_barHP),HX_HCSTRING("_barHP","\xdc","\x92","\xa0","\xa9")},
	{hx::fsObject /*::flixel::ui::FlxBar*/ ,(int)offsetof(HUD_obj,_barRage),HX_HCSTRING("_barRage","\x81","\x64","\xb9","\xc7")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *HUD_obj_sStaticStorageInfo = 0;
#endif

static ::String HUD_obj_sMemberFields[] = {
	HX_HCSTRING("_sprBack","\x7d","\x43","\x6d","\x7f"),
	HX_HCSTRING("_sprHealth","\x72","\x13","\x50","\xda"),
	HX_HCSTRING("_sprMoney","\x2a","\x7c","\xdf","\x5e"),
	HX_HCSTRING("_txtHealth","\xed","\xfa","\xff","\xc9"),
	HX_HCSTRING("_txtMoney","\x0f","\x5d","\x74","\xb1"),
	HX_HCSTRING("_txtRage","\x9e","\x33","\x3e","\x0d"),
	HX_HCSTRING("_barHP","\xdc","\x92","\xa0","\xa9"),
	HX_HCSTRING("_barRage","\x81","\x64","\xb9","\xc7"),
	HX_HCSTRING("updateHUD","\x2e","\x12","\xdc","\x82"),
	::String(null()) };

static void HUD_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(HUD_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void HUD_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(HUD_obj::__mClass,"__mClass");
};

#endif

hx::Class HUD_obj::__mClass;

void HUD_obj::__register()
{
	hx::Object *dummy = new HUD_obj;
	HUD_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("HUD","\x97","\xec","\x36","\x00");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = HUD_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(HUD_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< HUD_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = HUD_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HUD_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HUD_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

