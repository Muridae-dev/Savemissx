// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_effects_FlxFlicker
#include <flixel/effects/FlxFlicker.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_16_new,"Player","new",0x8d5554f3,"Player.new","Player.hx",16,0xa27fc9dd)
static const int _hx_array_data_6c4d5f81_1[] = {
	(int)0,(int)1,(int)2,(int)3,(int)4,(int)5,
};
static const int _hx_array_data_6c4d5f81_2[] = {
	(int)8,(int)9,(int)10,(int)11,(int)12,(int)13,
};
static const int _hx_array_data_6c4d5f81_3[] = {
	(int)16,(int)17,(int)18,(int)19,(int)20,(int)21,(int)20,(int)19,(int)18,
};
static const int _hx_array_data_6c4d5f81_4[] = {
	(int)24,(int)25,(int)26,(int)27,(int)28,(int)29,(int)28,(int)27,(int)26,
};
static const int _hx_array_data_6c4d5f81_5[] = {
	(int)32,
};
static const int _hx_array_data_6c4d5f81_6[] = {
	(int)40,
};
static const int _hx_array_data_6c4d5f81_7[] = {
	(int)48,
};
static const int _hx_array_data_6c4d5f81_8[] = {
	(int)56,
};
static const int _hx_array_data_6c4d5f81_9[] = {
	(int)64,(int)65,(int)66,(int)67,
};
static const int _hx_array_data_6c4d5f81_10[] = {
	(int)72,(int)73,(int)74,(int)75,
};
static const int _hx_array_data_6c4d5f81_11[] = {
	(int)96,(int)97,(int)98,(int)99,(int)100,
};
static const int _hx_array_data_6c4d5f81_12[] = {
	(int)104,(int)105,(int)106,(int)107,(int)108,
};
static const int _hx_array_data_6c4d5f81_13[] = {
	(int)80,(int)81,(int)82,(int)83,(int)84,(int)85,(int)81,(int)80,
};
static const int _hx_array_data_6c4d5f81_14[] = {
	(int)88,(int)89,(int)90,(int)91,(int)92,(int)93,(int)89,(int)88,
};
static const int _hx_array_data_6c4d5f81_15[] = {
	(int)112,(int)112,(int)113,(int)114,(int)115,(int)115,(int)116,(int)117,
};
static const int _hx_array_data_6c4d5f81_16[] = {
	(int)120,(int)120,(int)121,(int)122,(int)123,(int)123,(int)124,(int)125,
};
static const int _hx_array_data_6c4d5f81_17[] = {
	(int)128,(int)129,(int)130,(int)130,
};
static const int _hx_array_data_6c4d5f81_18[] = {
	(int)136,(int)137,(int)138,(int)138,
};
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_88_attackstop,"Player","attackstop",0xfb97f397,"Player.attackstop","Player.hx",88,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_93_movement,"Player","movement",0x91ad8bbc,"Player.movement","Player.hx",93,0xa27fc9dd)
static const int _hx_array_data_6c4d5f81_21[] = {
	(int)32,
};
static const int _hx_array_data_6c4d5f81_22[] = {
	(int)83,
};
static const int _hx_array_data_6c4d5f81_23[] = {
	(int)68,
};
static const int _hx_array_data_6c4d5f81_24[] = {
	(int)65,
};
static const int _hx_array_data_6c4d5f81_25[] = {
	(int)69,
};
static const int _hx_array_data_6c4d5f81_26[] = {
	(int)16,
};
static const int _hx_array_data_6c4d5f81_27[] = {
	(int)68,
};
static const int _hx_array_data_6c4d5f81_28[] = {
	(int)65,
};
static const int _hx_array_data_6c4d5f81_29[] = {
	(int)37,
};
static const int _hx_array_data_6c4d5f81_30[] = {
	(int)39,
};
static const int _hx_array_data_6c4d5f81_31[] = {
	(int)38,
};
static const int _hx_array_data_6c4d5f81_32[] = {
	(int)40,
};
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_322_update,"Player","update",0xf1f8df56,"Player.update","Player.hx",322,0xa27fc9dd)

void Player_obj::__construct( ::Dynamic __o_X, ::Dynamic __o_Y){
 ::Dynamic X = __o_X.Default(0);
 ::Dynamic Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_16_new)
HXLINE(  28)		this->_uddir = ((Float)0);
HXLINE(  26)		this->_facedir = ((Float)0);
HXLINE(  23)		this->_punchtmr = ((Float)0);
HXLINE(  20)		this->_rageMultp = ((Float)1);
HXLINE(  19)		this->_dbjump = (int)0;
HXLINE(  33)		super::__construct(X,Y,null());
HXLINE(  35)		this->set_facing((int)16);
HXLINE(  36)		this->loadGraphic(HX_("assets/images/player.png",87,88,81,c6),true,(int)32,(int)32,null(),null());
HXLINE(  37)		::haxe::IMap_obj::set(this->_facingFlip,(int)1, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),false)
            			->setFixed(1,HX_("y",79,00,00,00),false)));
HXLINE(  38)		::haxe::IMap_obj::set(this->_facingFlip,(int)16, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),true)
            			->setFixed(1,HX_("y",79,00,00,00),false)));
HXLINE(  40)		this->_sndStep = ::flixel::FlxG_obj::sound->load(HX_("assets/sounds/step.wav",29,a0,d3,5a),((Float)0.1),null(),null(),null(),null(),null(),null());
HXLINE(  44)		this->animation->add(HX_("ieR",f6,04,50,00),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_1,6),(int)10,false,null(),null());
HXLINE(  45)		this->animation->add(HX_("ieL",f0,04,50,00),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_2,6),(int)10,false,null(),null());
HXLINE(  47)		this->animation->add(HX_("runR",a7,7a,b3,4b),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_3,9),(int)15,false,null(),null());
HXLINE(  48)		this->animation->add(HX_("runL",a1,7a,b3,4b),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_4,9),(int)15,false,null(),null());
HXLINE(  50)		this->animation->add(HX_("upR",97,29,59,00),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_5,1),(int)10,false,null(),null());
HXLINE(  51)		this->animation->add(HX_("upL",91,29,59,00),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_6,1),(int)10,false,null(),null());
HXLINE(  53)		this->animation->add(HX_("dwnR",77,02,74,42),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_7,1),(int)10,false,null(),null());
HXLINE(  54)		this->animation->add(HX_("dwnL",71,02,74,42),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_8,1),(int)10,false,null(),null());
HXLINE(  56)		this->animation->add(HX_("pncR",0d,b4,5b,4a),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_9,4),(int)10,false,null(),null());
HXLINE(  57)		this->animation->add(HX_("pncL",07,b4,5b,4a),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_10,4),(int)10,false,null(),null());
HXLINE(  59)		this->animation->add(HX_("hbttR",18,a8,cb,22),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_11,5),(int)15,false,null(),null());
HXLINE(  60)		this->animation->add(HX_("hbttL",12,a8,cb,22),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_12,5),(int)15,false,null(),null());
HXLINE(  62)		this->animation->add(HX_("airkR",91,8a,9c,1f),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_13,8),(int)18,false,null(),null());
HXLINE(  63)		this->animation->add(HX_("airkL",8b,8a,9c,1f),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_14,8),(int)18,false,null(),null());
HXLINE(  65)		this->animation->add(HX_("airkUR",3e,b7,5c,89),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_15,8),(int)20,false,null(),null());
HXLINE(  66)		this->animation->add(HX_("airkUL",38,b7,5c,89),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_16,8),(int)20,false,null(),null());
HXLINE(  68)		this->animation->add(HX_("airkDR",6f,a8,5c,89),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_17,4),(int)12,false,null(),null());
HXLINE(  69)		this->animation->add(HX_("airkDL",69,a8,5c,89),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_18,4),(int)12,false,null(),null());
HXLINE(  75)		 ::flixel::math::FlxPoint _hx_tmp = this->drag;
HXDLIN(  75)		_hx_tmp->set_x(this->drag->set_y((int)1600));
HXLINE(  78)		this->setSize((int)9,(int)30);
HXLINE(  79)		this->offset->set((int)11,(int)2);
HXLINE(  80)		this->acceleration->set_y((int)700);
            	}

Dynamic Player_obj::__CreateEmpty() { return new Player_obj; }

void *Player_obj::_hx_vtable = 0;

Dynamic Player_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Player_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x6c4d5f81;
	}
}

void Player_obj::attackstop( ::flixel::util::FlxTimer Timer){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_88_attackstop)
HXDLIN(  88)		this->_punchtmr = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,attackstop,(void))

void Player_obj::movement(){
            	HX_GC_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_93_movement)
HXLINE(  96)		bool _up = false;
HXLINE(  97)		bool _down = false;
HXLINE(  98)		bool _right = false;
HXLINE(  99)		bool _left = false;
HXLINE( 100)		bool _roll = false;
HXLINE( 101)		bool _rightone = false;
HXLINE( 102)		bool _leftone = false;
HXLINE( 103)		bool _run = false;
HXLINE( 105)		_up = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_21,1),(int)2);
HXLINE( 106)		_down = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_22,1),(int)2);
HXLINE( 107)		_right = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_23,1),(int)1);
HXLINE( 108)		_left = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_24,1),(int)1);
HXLINE( 109)		_roll = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_25,1),(int)2);
HXLINE( 110)		_run = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_26,1),(int)1);
HXLINE( 112)		_rightone = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_27,1),(int)2);
HXLINE( 113)		_leftone = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_28,1),(int)2);
HXLINE( 118)		bool _lattack = false;
HXLINE( 119)		bool _rattack = false;
HXLINE( 120)		bool _upattack = false;
HXLINE( 121)		bool _dnattack = false;
HXLINE( 123)		_lattack = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_29,1),(int)2);
HXLINE( 124)		_rattack = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_30,1),(int)2);
HXLINE( 125)		_upattack = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_31,1),(int)2);
HXLINE( 126)		_dnattack = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_32,1),(int)2);
HXLINE( 133)		if ((_run == false)) {
HXLINE( 133)			 ::flixel::math::FlxPoint _hx_tmp = this->maxVelocity;
HXDLIN( 133)			_hx_tmp->set_x(((int)150 * this->_rageMultp));
            		}
HXLINE( 134)		if ((_run == true)) {
HXLINE( 134)			 ::flixel::math::FlxPoint _hx_tmp1 = this->maxVelocity;
HXDLIN( 134)			_hx_tmp1->set_x(((int)250 * this->_rageMultp));
            		}
HXLINE( 137)		bool _hx_tmp2;
HXDLIN( 137)		if ((this->velocity->y == (int)0)) {
HXLINE( 137)			_hx_tmp2 = (this->_uddir == (int)0);
            		}
            		else {
HXLINE( 137)			_hx_tmp2 = false;
            		}
HXDLIN( 137)		if (_hx_tmp2) {
HXLINE( 137)			this->_dbjump = (int)0;
            		}
HXLINE( 141)		bool _hx_tmp3;
HXDLIN( 141)		if ((_right != true)) {
HXLINE( 141)			_hx_tmp3 = (_left != true);
            		}
            		else {
HXLINE( 141)			_hx_tmp3 = false;
            		}
HXDLIN( 141)		if (_hx_tmp3) {
HXLINE( 143)			this->acceleration->set_x((int)0);
            		}
HXLINE( 147)		bool _hx_tmp4;
HXDLIN( 147)		if (!(_rightone)) {
HXLINE( 147)			_hx_tmp4 = _leftone;
            		}
            		else {
HXLINE( 147)			_hx_tmp4 = true;
            		}
HXDLIN( 147)		if (_hx_tmp4) {
HXLINE( 148)			this->acceleration->set_x((int)0);
            		}
HXLINE( 152)		bool _hx_tmp5;
HXDLIN( 152)		if ((this->velocity->y < (int)0)) {
HXLINE( 152)			_hx_tmp5 = (this->_punchtmr == (int)0);
            		}
            		else {
HXLINE( 152)			_hx_tmp5 = false;
            		}
HXDLIN( 152)		if (_hx_tmp5) {
HXLINE( 152)			this->set_facing((int)256);
            		}
HXLINE( 153)		bool _hx_tmp6;
HXDLIN( 153)		if ((this->velocity->y > (int)0)) {
HXLINE( 153)			_hx_tmp6 = (this->_punchtmr == (int)0);
            		}
            		else {
HXLINE( 153)			_hx_tmp6 = false;
            		}
HXDLIN( 153)		if (_hx_tmp6) {
HXLINE( 153)			this->set_facing((int)4096);
            		}
HXLINE( 156)		bool _hx_tmp7;
HXDLIN( 156)		bool _hx_tmp8;
HXDLIN( 156)		if ((this->velocity->y == (int)0)) {
HXLINE( 156)			_hx_tmp8 = (this->velocity->x == (int)0);
            		}
            		else {
HXLINE( 156)			_hx_tmp8 = false;
            		}
HXDLIN( 156)		if (_hx_tmp8) {
HXLINE( 156)			_hx_tmp7 = (this->_punchtmr == (int)0);
            		}
            		else {
HXLINE( 156)			_hx_tmp7 = false;
            		}
HXDLIN( 156)		if (_hx_tmp7) {
HXLINE( 157)			if ((this->_facedir == (int)1)) {
HXLINE( 157)				this->animation->play(HX_("ieR",f6,04,50,00),null(),null(),null());
HXDLIN( 157)				this->_uddir = (int)0;
            			}
HXLINE( 158)			if ((this->_facedir == (int)0)) {
HXLINE( 158)				this->animation->play(HX_("ieL",f0,04,50,00),null(),null(),null());
HXDLIN( 158)				this->_uddir = (int)0;
            			}
            		}
HXLINE( 164)		bool _hx_tmp9;
HXDLIN( 164)		bool _hx_tmp10;
HXDLIN( 164)		bool _hx_tmp11;
HXDLIN( 164)		bool _hx_tmp12;
HXDLIN( 164)		bool _hx_tmp13;
HXDLIN( 164)		if (!(_up)) {
HXLINE( 164)			_hx_tmp13 = _down;
            		}
            		else {
HXLINE( 164)			_hx_tmp13 = true;
            		}
HXDLIN( 164)		if (!(_hx_tmp13)) {
HXLINE( 164)			_hx_tmp12 = _left;
            		}
            		else {
HXLINE( 164)			_hx_tmp12 = true;
            		}
HXDLIN( 164)		if (!(_hx_tmp12)) {
HXLINE( 164)			_hx_tmp11 = _right;
            		}
            		else {
HXLINE( 164)			_hx_tmp11 = true;
            		}
HXDLIN( 164)		if (!(_hx_tmp11)) {
HXLINE( 164)			_hx_tmp10 = (this->velocity->y > (int)0);
            		}
            		else {
HXLINE( 164)			_hx_tmp10 = true;
            		}
HXDLIN( 164)		if (!(_hx_tmp10)) {
HXLINE( 164)			_hx_tmp9 = (this->velocity->y < (int)0);
            		}
            		else {
HXLINE( 164)			_hx_tmp9 = true;
            		}
HXDLIN( 164)		if (_hx_tmp9) {
HXLINE( 167)			if (_up) {
HXLINE( 170)				if ((this->_dbjump <= (int)1)) {
HXLINE( 171)					this->velocity->set_y((int)-300);
HXLINE( 172)					this->_dbjump++;
            				}
            			}
            			else {
HXLINE( 177)				if (_down) {
HXLINE( 179)					if ((this->velocity->y != (int)0)) {
HXLINE( 179)						this->velocity->set_y((int)300);
            					}
            				}
            				else {
HXLINE( 183)					if (_left) {
HXLINE( 186)						if ((this->velocity->x >= (int)0)) {
HXLINE( 186)							this->velocity->set_x((int)-10);
HXDLIN( 186)							this->acceleration->set_x((int)-500);
            						}
HXLINE( 188)						this->_facedir = (int)0;
HXLINE( 189)						{
HXLINE( 189)							 ::flixel::math::FlxPoint _g = this->acceleration;
HXDLIN( 189)							_g->set_x((_g->x - (int)50));
            						}
HXLINE( 192)						bool _hx_tmp14;
HXDLIN( 192)						if ((this->velocity->y == (int)0)) {
HXLINE( 192)							_hx_tmp14 = (this->_punchtmr == (int)0);
            						}
            						else {
HXLINE( 192)							_hx_tmp14 = false;
            						}
HXDLIN( 192)						if (_hx_tmp14) {
HXLINE( 192)							this->set_facing((int)1);
HXDLIN( 192)							this->_sndStep->play(null(),null(),null());
            						}
HXLINE( 193)						bool _hx_tmp15;
HXDLIN( 193)						if (!((this->velocity->y < (int)0))) {
HXLINE( 193)							_hx_tmp15 = (this->velocity->y > (int)0);
            						}
            						else {
HXLINE( 193)							_hx_tmp15 = true;
            						}
HXDLIN( 193)						if (_hx_tmp15) {
HXLINE( 193)							::haxe::IMap_obj::set(this->_facingFlip,(int)256, ::Dynamic(hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("x",78,00,00,00),false)
            								->setFixed(1,HX_("y",79,00,00,00),false)));
HXDLIN( 193)							::haxe::IMap_obj::set(this->_facingFlip,(int)4096, ::Dynamic(hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("x",78,00,00,00),false)
            								->setFixed(1,HX_("y",79,00,00,00),false)));
            						}
HXLINE( 196)						if (_roll) {
HXLINE( 198)							::flixel::effects::FlxFlicker_obj::flicker(hx::ObjectPtr<OBJ_>(this),((Float)0.4),((Float)0.04),true,true,null(),null());
HXLINE( 199)							{
HXLINE( 199)								 ::Player _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 199)								_g1->set_x((_g1->x - (int)5));
            							}
            						}
            					}
            					else {
HXLINE( 204)						if (_right) {
HXLINE( 207)							if ((this->velocity->x <= (int)0)) {
HXLINE( 207)								this->velocity->set_x((int)10);
HXDLIN( 207)								this->acceleration->set_x((int)500);
            							}
HXLINE( 209)							this->_facedir = (int)1;
HXLINE( 210)							{
HXLINE( 210)								 ::flixel::math::FlxPoint _g2 = this->acceleration;
HXDLIN( 210)								_g2->set_x((_g2->x + (int)50));
            							}
HXLINE( 213)							bool _hx_tmp16;
HXDLIN( 213)							if ((this->velocity->y == (int)0)) {
HXLINE( 213)								_hx_tmp16 = (this->_punchtmr == (int)0);
            							}
            							else {
HXLINE( 213)								_hx_tmp16 = false;
            							}
HXDLIN( 213)							if (_hx_tmp16) {
HXLINE( 213)								this->set_facing((int)16);
HXDLIN( 213)								this->_sndStep->play(null(),null(),null());
            							}
HXLINE( 214)							bool _hx_tmp17;
HXDLIN( 214)							if (!((this->velocity->y < (int)0))) {
HXLINE( 214)								_hx_tmp17 = (this->velocity->y > (int)0);
            							}
            							else {
HXLINE( 214)								_hx_tmp17 = true;
            							}
HXDLIN( 214)							if (_hx_tmp17) {
HXLINE( 214)								::haxe::IMap_obj::set(this->_facingFlip,(int)256, ::Dynamic(hx::Anon_obj::Create(2)
            									->setFixed(0,HX_("x",78,00,00,00),true)
            									->setFixed(1,HX_("y",79,00,00,00),false)));
HXDLIN( 214)								::haxe::IMap_obj::set(this->_facingFlip,(int)4096, ::Dynamic(hx::Anon_obj::Create(2)
            									->setFixed(0,HX_("x",78,00,00,00),true)
            									->setFixed(1,HX_("y",79,00,00,00),false)));
            							}
HXLINE( 218)							if (_roll) {
HXLINE( 220)								::flixel::effects::FlxFlicker_obj::flicker(hx::ObjectPtr<OBJ_>(this),((Float)0.4),((Float)0.04),true,true,null(),null());
HXLINE( 221)								{
HXLINE( 221)									 ::Player _g3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 221)									_g3->set_x((_g3->x + (int)5));
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 227)			if ((this->_punchtmr == (int)0)) {
HXLINE( 229)				bool _hx_tmp18;
HXDLIN( 229)				if ((this->velocity->x == (int)0)) {
HXLINE( 229)					_hx_tmp18 = (this->velocity->y != (int)0);
            				}
            				else {
HXLINE( 229)					_hx_tmp18 = true;
            				}
HXDLIN( 229)				if (_hx_tmp18) {
HXLINE( 231)					if ((this->facing == (int)16)) {
HXLINE( 231)						this->animation->play(HX_("runR",a7,7a,b3,4b),null(),null(),null());
HXDLIN( 231)						this->_uddir = (int)0;
            					}
HXLINE( 233)					if ((this->facing == (int)1)) {
HXLINE( 233)						this->animation->play(HX_("runL",a1,7a,b3,4b),null(),null(),null());
HXDLIN( 233)						this->_uddir = (int)0;
            					}
HXLINE( 235)					if ((this->facing == (int)256)) {
HXLINE( 238)						if ((this->_facedir == (int)1)) {
HXLINE( 238)							this->animation->play(HX_("upR",97,29,59,00),null(),null(),null());
HXDLIN( 238)							::haxe::IMap_obj::set(this->_facingFlip,(int)256, ::Dynamic(hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("x",78,00,00,00),true)
            								->setFixed(1,HX_("y",79,00,00,00),false)));
HXDLIN( 238)							::haxe::IMap_obj::set(this->_facingFlip,(int)4096, ::Dynamic(hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("x",78,00,00,00),true)
            								->setFixed(1,HX_("y",79,00,00,00),false)));
            						}
HXLINE( 240)						if ((this->_facedir == (int)0)) {
HXLINE( 240)							this->animation->play(HX_("upL",91,29,59,00),null(),null(),null());
HXDLIN( 240)							::haxe::IMap_obj::set(this->_facingFlip,(int)256, ::Dynamic(hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("x",78,00,00,00),false)
            								->setFixed(1,HX_("y",79,00,00,00),false)));
HXDLIN( 240)							::haxe::IMap_obj::set(this->_facingFlip,(int)4096, ::Dynamic(hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("x",78,00,00,00),false)
            								->setFixed(1,HX_("y",79,00,00,00),false)));
            						}
HXLINE( 241)						this->_uddir = (int)1;
            					}
HXLINE( 244)					if ((this->facing == (int)4096)) {
HXLINE( 247)						if ((this->_facedir == (int)1)) {
HXLINE( 247)							this->animation->play(HX_("dwnR",77,02,74,42),null(),null(),null());
HXDLIN( 247)							::haxe::IMap_obj::set(this->_facingFlip,(int)256, ::Dynamic(hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("x",78,00,00,00),true)
            								->setFixed(1,HX_("y",79,00,00,00),false)));
HXDLIN( 247)							::haxe::IMap_obj::set(this->_facingFlip,(int)4096, ::Dynamic(hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("x",78,00,00,00),true)
            								->setFixed(1,HX_("y",79,00,00,00),false)));
            						}
HXLINE( 249)						if ((this->_facedir == (int)0)) {
HXLINE( 249)							this->animation->play(HX_("dwnL",71,02,74,42),null(),null(),null());
HXDLIN( 249)							::haxe::IMap_obj::set(this->_facingFlip,(int)256, ::Dynamic(hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("x",78,00,00,00),false)
            								->setFixed(1,HX_("y",79,00,00,00),false)));
HXDLIN( 249)							::haxe::IMap_obj::set(this->_facingFlip,(int)4096, ::Dynamic(hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("x",78,00,00,00),false)
            								->setFixed(1,HX_("y",79,00,00,00),false)));
            						}
HXLINE( 250)						this->_uddir = (int)1;
            					}
            				}
            			}
            		}
HXLINE( 260)		bool _hx_tmp19;
HXDLIN( 260)		bool _hx_tmp20;
HXDLIN( 260)		bool _hx_tmp21;
HXDLIN( 260)		if (!(_lattack)) {
HXLINE( 260)			_hx_tmp21 = _rattack;
            		}
            		else {
HXLINE( 260)			_hx_tmp21 = true;
            		}
HXDLIN( 260)		if (!(_hx_tmp21)) {
HXLINE( 260)			_hx_tmp20 = _upattack;
            		}
            		else {
HXLINE( 260)			_hx_tmp20 = true;
            		}
HXDLIN( 260)		if (!(_hx_tmp20)) {
HXLINE( 260)			_hx_tmp19 = _dnattack;
            		}
            		else {
HXLINE( 260)			_hx_tmp19 = true;
            		}
HXDLIN( 260)		if (_hx_tmp19) {
HXLINE( 263)			bool _hx_tmp22;
HXDLIN( 263)			if (_lattack) {
HXLINE( 263)				_hx_tmp22 = (this->_punchtmr == (int)0);
            			}
            			else {
HXLINE( 263)				_hx_tmp22 = false;
            			}
HXDLIN( 263)			if (_hx_tmp22) {
HXLINE( 265)				this->set_facing((int)1);
HXLINE( 266)				this->_facedir = (int)0;
HXLINE( 268)				if ((this->velocity->y == (int)0)) {
HXLINE( 268)					this->animation->play(HX_("pncL",07,b4,5b,4a),null(),null(),null());
            				}
HXLINE( 270)				if ((this->velocity->y != (int)0)) {
HXLINE( 270)					this->animation->play(HX_("airkL",8b,8a,9c,1f),null(),null(),null());
            				}
HXLINE( 271)				this->_punchtmr = (int)1;
HXLINE( 272)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.4),this->attackstop_dyn(),(int)1);
            			}
HXLINE( 276)			bool _hx_tmp23;
HXDLIN( 276)			if (_rattack) {
HXLINE( 276)				_hx_tmp23 = (this->_punchtmr == (int)0);
            			}
            			else {
HXLINE( 276)				_hx_tmp23 = false;
            			}
HXDLIN( 276)			if (_hx_tmp23) {
HXLINE( 278)				this->set_facing((int)16);
HXLINE( 279)				this->_facedir = (int)1;
HXLINE( 281)				if ((this->velocity->y == (int)0)) {
HXLINE( 281)					this->animation->play(HX_("pncR",0d,b4,5b,4a),null(),null(),null());
            				}
HXLINE( 283)				if ((this->velocity->y != (int)0)) {
HXLINE( 283)					this->animation->play(HX_("airkR",91,8a,9c,1f),null(),null(),null());
            				}
HXLINE( 285)				this->_punchtmr = (int)1;
HXLINE( 286)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.4),this->attackstop_dyn(),(int)1);
            			}
HXLINE( 290)			bool _hx_tmp24;
HXDLIN( 290)			if (_upattack) {
HXLINE( 290)				_hx_tmp24 = (this->_punchtmr == (int)0);
            			}
            			else {
HXLINE( 290)				_hx_tmp24 = false;
            			}
HXDLIN( 290)			if (_hx_tmp24) {
HXLINE( 293)				bool _hx_tmp25;
HXDLIN( 293)				if ((this->velocity->y == (int)0)) {
HXLINE( 293)					_hx_tmp25 = (this->_facedir == (int)1);
            				}
            				else {
HXLINE( 293)					_hx_tmp25 = false;
            				}
HXDLIN( 293)				if (_hx_tmp25) {
HXLINE( 293)					this->animation->play(HX_("hbttR",18,a8,cb,22),null(),null(),null());
            				}
HXLINE( 294)				bool _hx_tmp26;
HXDLIN( 294)				if ((this->velocity->y == (int)0)) {
HXLINE( 294)					_hx_tmp26 = (this->_facedir == (int)0);
            				}
            				else {
HXLINE( 294)					_hx_tmp26 = false;
            				}
HXDLIN( 294)				if (_hx_tmp26) {
HXLINE( 294)					this->animation->play(HX_("hbttL",12,a8,cb,22),null(),null(),null());
            				}
HXLINE( 296)				bool _hx_tmp27;
HXDLIN( 296)				if ((this->velocity->y != (int)0)) {
HXLINE( 296)					_hx_tmp27 = (this->_facedir == (int)1);
            				}
            				else {
HXLINE( 296)					_hx_tmp27 = false;
            				}
HXDLIN( 296)				if (_hx_tmp27) {
HXLINE( 296)					this->animation->play(HX_("airkUR",3e,b7,5c,89),null(),null(),null());
            				}
HXLINE( 297)				bool _hx_tmp28;
HXDLIN( 297)				if ((this->velocity->y != (int)0)) {
HXLINE( 297)					_hx_tmp28 = (this->_facedir == (int)0);
            				}
            				else {
HXLINE( 297)					_hx_tmp28 = false;
            				}
HXDLIN( 297)				if (_hx_tmp28) {
HXLINE( 297)					this->animation->play(HX_("airkUL",38,b7,5c,89),null(),null(),null());
            				}
HXLINE( 299)				this->_punchtmr = (int)1;
HXLINE( 300)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.4),this->attackstop_dyn(),(int)1);
            			}
HXLINE( 304)			bool _hx_tmp29;
HXDLIN( 304)			if (_dnattack) {
HXLINE( 304)				_hx_tmp29 = (this->_punchtmr == (int)0);
            			}
            			else {
HXLINE( 304)				_hx_tmp29 = false;
            			}
HXDLIN( 304)			if (_hx_tmp29) {
HXLINE( 306)				bool _hx_tmp30;
HXDLIN( 306)				if ((this->velocity->y != (int)0)) {
HXLINE( 306)					_hx_tmp30 = (this->_facedir == (int)1);
            				}
            				else {
HXLINE( 306)					_hx_tmp30 = false;
            				}
HXDLIN( 306)				if (_hx_tmp30) {
HXLINE( 306)					this->animation->play(HX_("airkDR",6f,a8,5c,89),null(),null(),null());
            				}
HXLINE( 307)				bool _hx_tmp31;
HXDLIN( 307)				if ((this->velocity->y != (int)0)) {
HXLINE( 307)					_hx_tmp31 = (this->_facedir == (int)0);
            				}
            				else {
HXLINE( 307)					_hx_tmp31 = false;
            				}
HXDLIN( 307)				if (_hx_tmp31) {
HXLINE( 307)					this->animation->play(HX_("airkDL",69,a8,5c,89),null(),null(),null());
            				}
HXLINE( 309)				this->_punchtmr = (int)1;
HXLINE( 310)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.4),this->attackstop_dyn(),(int)1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,movement,(void))

void Player_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_322_update)
HXLINE( 323)		this->movement();
HXLINE( 324)		this->super::update(elapsed);
            	}



hx::ObjectPtr< Player_obj > Player_obj::__new( ::Dynamic __o_X, ::Dynamic __o_Y) {
	hx::ObjectPtr< Player_obj > __this = new Player_obj();
	__this->__construct(__o_X,__o_Y);
	return __this;
}

hx::ObjectPtr< Player_obj > Player_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic __o_X, ::Dynamic __o_Y) {
	Player_obj *__this = (Player_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Player_obj), true, "Player"));
	*(void **)__this = Player_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y);
	return __this;
}

Player_obj::Player_obj()
{
}

void Player_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Player);
	HX_MARK_MEMBER_NAME(_sndStep,"_sndStep");
	HX_MARK_MEMBER_NAME(_dbjump,"_dbjump");
	HX_MARK_MEMBER_NAME(_rageMultp,"_rageMultp");
	HX_MARK_MEMBER_NAME(_punchtmr,"_punchtmr");
	HX_MARK_MEMBER_NAME(_facedir,"_facedir");
	HX_MARK_MEMBER_NAME(_uddir,"_uddir");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Player_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_sndStep,"_sndStep");
	HX_VISIT_MEMBER_NAME(_dbjump,"_dbjump");
	HX_VISIT_MEMBER_NAME(_rageMultp,"_rageMultp");
	HX_VISIT_MEMBER_NAME(_punchtmr,"_punchtmr");
	HX_VISIT_MEMBER_NAME(_facedir,"_facedir");
	HX_VISIT_MEMBER_NAME(_uddir,"_uddir");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Player_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_uddir") ) { return hx::Val( _uddir ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_dbjump") ) { return hx::Val( _dbjump ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_sndStep") ) { return hx::Val( _sndStep ); }
		if (HX_FIELD_EQ(inName,"_facedir") ) { return hx::Val( _facedir ); }
		if (HX_FIELD_EQ(inName,"movement") ) { return hx::Val( movement_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_punchtmr") ) { return hx::Val( _punchtmr ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_rageMultp") ) { return hx::Val( _rageMultp ); }
		if (HX_FIELD_EQ(inName,"attackstop") ) { return hx::Val( attackstop_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Player_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_uddir") ) { _uddir=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_dbjump") ) { _dbjump=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_sndStep") ) { _sndStep=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_facedir") ) { _facedir=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_punchtmr") ) { _punchtmr=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_rageMultp") ) { _rageMultp=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Player_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_sndStep","\xd6","\x78","\x65","\xae"));
	outFields->push(HX_HCSTRING("_dbjump","\x0b","\xc5","\xd5","\x1d"));
	outFields->push(HX_HCSTRING("_rageMultp","\x74","\xaf","\xf1","\xb7"));
	outFields->push(HX_HCSTRING("_punchtmr","\x4a","\xdf","\xfa","\x8f"));
	outFields->push(HX_HCSTRING("_facedir","\x51","\xe2","\x9d","\xd7"));
	outFields->push(HX_HCSTRING("_uddir","\x9f","\xb9","\x2e","\x9c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Player_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(Player_obj,_sndStep),HX_HCSTRING("_sndStep","\xd6","\x78","\x65","\xae")},
	{hx::fsInt,(int)offsetof(Player_obj,_dbjump),HX_HCSTRING("_dbjump","\x0b","\xc5","\xd5","\x1d")},
	{hx::fsFloat,(int)offsetof(Player_obj,_rageMultp),HX_HCSTRING("_rageMultp","\x74","\xaf","\xf1","\xb7")},
	{hx::fsFloat,(int)offsetof(Player_obj,_punchtmr),HX_HCSTRING("_punchtmr","\x4a","\xdf","\xfa","\x8f")},
	{hx::fsFloat,(int)offsetof(Player_obj,_facedir),HX_HCSTRING("_facedir","\x51","\xe2","\x9d","\xd7")},
	{hx::fsFloat,(int)offsetof(Player_obj,_uddir),HX_HCSTRING("_uddir","\x9f","\xb9","\x2e","\x9c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Player_obj_sStaticStorageInfo = 0;
#endif

static ::String Player_obj_sMemberFields[] = {
	HX_HCSTRING("_sndStep","\xd6","\x78","\x65","\xae"),
	HX_HCSTRING("_dbjump","\x0b","\xc5","\xd5","\x1d"),
	HX_HCSTRING("_rageMultp","\x74","\xaf","\xf1","\xb7"),
	HX_HCSTRING("_punchtmr","\x4a","\xdf","\xfa","\x8f"),
	HX_HCSTRING("_facedir","\x51","\xe2","\x9d","\xd7"),
	HX_HCSTRING("_uddir","\x9f","\xb9","\x2e","\x9c"),
	HX_HCSTRING("attackstop","\xca","\x6f","\xa9","\x9b"),
	HX_HCSTRING("movement","\x2f","\x85","\x37","\x00"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void Player_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Player_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#endif

hx::Class Player_obj::__mClass;

void Player_obj::__register()
{
	hx::Object *dummy = new Player_obj;
	Player_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Player","\x81","\x5f","\x4d","\x6c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Player_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Player_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Player_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Player_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

