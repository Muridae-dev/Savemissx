// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Attack
#include <Attack.h>
#endif
#ifndef INCLUDED_Coin
#include <Coin.h>
#endif
#ifndef INCLUDED_Enemy
#include <Enemy.h>
#endif
#ifndef INCLUDED_GameOverState
#include <GameOverState.h>
#endif
#ifndef INCLUDED_HUD
#include <HUD.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Rage
#include <Rage.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxBackdrop
#include <flixel/addons/display/FlxBackdrop.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_ogmo_FlxOgmoLoader
#include <flixel/addons/editors/ogmo/FlxOgmoLoader.h>
#endif
#ifndef INCLUDED_flixel_effects_FlxFlicker
#include <flixel/effects/FlxFlicker.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemap
#include <flixel/tile/FlxTilemap.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_24_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",24,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_62_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",62,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_166_falldeath,"PlayState","falldeath",0x85577888,"PlayState.falldeath","PlayState.hx",166,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_174_nextlevel,"PlayState","nextlevel",0xc2cd8360,"PlayState.nextlevel","PlayState.hx",174,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_182_placeEntities,"PlayState","placeEntities",0xcb21ad57,"PlayState.placeEntities","PlayState.hx",182,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_209_playerTouchCoin,"PlayState","playerTouchCoin",0x7f00763e,"PlayState.playerTouchCoin","PlayState.hx",209,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_223_checkEnemyVision,"PlayState","checkEnemyVision",0xe46dc499,"PlayState.checkEnemyVision","PlayState.hx",223,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_238_attackDir,"PlayState","attackDir",0xfc984a14,"PlayState.attackDir","PlayState.hx",238,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_368_playerTouchEnemy,"PlayState","playerTouchEnemy",0xc787e8fb,"PlayState.playerTouchEnemy","PlayState.hx",368,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_395_doneFadeGO,"PlayState","doneFadeGO",0x34c07237,"PlayState.doneFadeGO","PlayState.hx",395,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_402_playerTouchAttack,"PlayState","playerTouchAttack",0xb43f01b5,"PlayState.playerTouchAttack","PlayState.hx",402,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_446_enemyNoStun,"PlayState","enemyNoStun",0x0cf1eff2,"PlayState.enemyNoStun","PlayState.hx",446,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_456_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",456,0xb30d7781)

void PlayState_obj::__construct(int Levelselector){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_24_new)
HXLINE(  44)		this->_dmgMultp = (int)1;
HXLINE(  41)		this->mA = ((Float)0);
HXLINE(  38)		this->_rage = (int)0;
HXLINE(  37)		this->_health = (int)3;
HXLINE(  36)		this->_money = (int)0;
HXLINE(  55)		this->_levelSelector = Levelselector;
HXLINE(  56)		super::__construct(null());
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x2335d9a7) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2335d9a7;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x3634c52c || inClassId==(int)0x46c2835d;
	}
}

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_62_create)
HXLINE(  68)		::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE(  71)		if ((this->_levelSelector == (int)1)) {
HXLINE(  73)			this->_map =  ::flixel::addons::editors::ogmo::FlxOgmoLoader_obj::__alloc( HX_CTX ,HX_("assets/data/level1.oel",0e,9e,08,af));
HXLINE(  74)			this->_mBack = this->_map->loadTilemap(HX_("assets/images/tilesback.png",dc,3a,84,c0),(int)16,(int)16,HX_("background",ee,93,1d,26));
HXLINE(  75)			this->_mWalls = this->_map->loadTilemap(HX_("assets/images/tiles.png",35,bc,d1,f5),(int)16,(int)16,HX_("walls",29,0c,1f,c5));
HXLINE(  76)			this->_mPlatf = this->_map->loadTilemap(HX_("assets/images/tilessmall.png",48,74,fe,fd),(int)16,(int)8,HX_("platforms",60,aa,82,92));
HXLINE(  78)			 ::flixel::addons::display::FlxBackdrop bg =  ::flixel::addons::display::FlxBackdrop_obj::__alloc( HX_CTX ,HX_("assets/images/forestbackbig.png",ec,0c,03,be),((Float)0.5),(int)0,true,false,null(),null());
HXLINE(  79)			this->add(bg);
            		}
HXLINE(  83)		if ((this->_levelSelector == (int)2)) {
HXLINE(  85)			this->_map =  ::flixel::addons::editors::ogmo::FlxOgmoLoader_obj::__alloc( HX_CTX ,HX_("assets/data/level2.oel",8f,32,6f,42));
HXLINE(  86)			this->_mBack = this->_map->loadTilemap(HX_("assets/images/tilesback.png",dc,3a,84,c0),(int)16,(int)16,HX_("background",ee,93,1d,26));
HXLINE(  87)			this->_mWalls = this->_map->loadTilemap(HX_("assets/images/tiles.png",35,bc,d1,f5),(int)16,(int)16,HX_("walls",29,0c,1f,c5));
HXLINE(  88)			this->_mPlatf = this->_map->loadTilemap(HX_("assets/images/tilessmall.png",48,74,fe,fd),(int)16,(int)8,HX_("platforms",60,aa,82,92));
            		}
HXLINE(  91)		this->_mBack->follow(null(),null(),null());
HXLINE(  92)		this->_mWalls->follow(null(),null(),null());
HXLINE(  93)		this->_mPlatf->follow(null(),null(),null());
HXLINE(  97)		this->_mBack->setTileProperties((int)1,(int)0,null(),null(),null());
HXLINE(  98)		this->_mBack->setTileProperties((int)2,(int)0,null(),null(),null());
HXLINE(  99)		this->_mBack->setTileProperties((int)3,(int)0,null(),null(),null());
HXLINE( 100)		this->add(this->_mBack);
HXLINE( 103)		this->_mWalls->setTileProperties((int)1,(int)0,this->falldeath_dyn(),hx::ClassOf< ::Player >(),null());
HXLINE( 104)		this->_mWalls->setTileProperties((int)2,(int)4369,null(),null(),null());
HXLINE( 105)		this->_mWalls->setTileProperties((int)3,(int)4369,null(),null(),null());
HXLINE( 106)		this->_mWalls->setTileProperties((int)4,(int)4369,null(),null(),null());
HXLINE( 107)		this->_mWalls->setTileProperties((int)5,(int)4369,null(),null(),null());
HXLINE( 108)		this->_mWalls->setTileProperties((int)6,(int)4369,null(),null(),null());
HXLINE( 109)		this->_mWalls->setTileProperties((int)7,(int)4369,null(),null(),null());
HXLINE( 110)		this->_mWalls->setTileProperties((int)8,(int)4369,null(),null(),null());
HXLINE( 111)		this->_mWalls->setTileProperties((int)9,(int)4369,null(),null(),null());
HXLINE( 112)		this->_mWalls->setTileProperties((int)10,(int)4369,null(),null(),null());
HXLINE( 113)		this->_mWalls->setTileProperties((int)11,(int)4369,null(),null(),null());
HXLINE( 114)		this->_mWalls->setTileProperties((int)17,(int)0,null(),null(),null());
HXLINE( 116)		this->_mWalls->setTileProperties((int)16,(int)0,this->nextlevel_dyn(),hx::ClassOf< ::Player >(),null());
HXLINE( 117)		this->add(this->_mWalls);
HXLINE( 120)		this->_mPlatf->setTileProperties((int)1,(int)256,null(),null(),null());
HXLINE( 121)		this->_mPlatf->setTileProperties((int)2,(int)256,null(),null(),null());
HXLINE( 122)		this->add(this->_mPlatf);
HXLINE( 126)		this->_grpCoins =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 127)		this->add(this->_grpCoins);
HXLINE( 130)		this->_grpEnemies =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 131)		this->add(this->_grpEnemies);
HXLINE( 135)		this->_player =  ::Player_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 136)		this->_map->loadEntities(this->placeEntities_dyn(),HX_("entities",41,96,95,92));
HXLINE( 137)		this->add(this->_player);
HXLINE( 140)		this->_attack =  ::Attack_obj::__alloc( HX_CTX ,this->_player->x,this->_player->y);
HXLINE( 141)		this->add(this->_attack);
HXLINE( 144)		this->_classrage =  ::Rage_obj::__alloc( HX_CTX ,this->_player->x,this->_player->y);
HXLINE( 145)		this->add(this->_classrage);
HXLINE( 148)		::flixel::FlxG_obj::camera->follow(this->_player,::flixel::FlxCameraFollowStyle_obj::TOPDOWN_TIGHT_dyn(),(int)1);
HXLINE( 151)		this->_hud =  ::HUD_obj::__alloc( HX_CTX );
HXLINE( 152)		this->add(this->_hud);
HXLINE( 155)		this->_combatSound = ::flixel::FlxG_obj::sound->load(HX_("assets/sounds/hurt.wav",6c,32,7c,8f),((Float)0.4),null(),null(),null(),null(),null(),null());
HXLINE( 156)		this->_deathSound = ::flixel::FlxG_obj::sound->load(HX_("assets/sounds/lose.wav",32,db,1d,3e),((Float)0.4),null(),null(),null(),null(),null(),null());
HXLINE( 157)		this->_sndCoin = ::flixel::FlxG_obj::sound->load(HX_("assets/sounds/coin.wav",ee,74,61,6a),((Float)0.4),null(),null(),null(),null(),null(),null());
HXLINE( 159)		this->super::create();
            	}


void PlayState_obj::falldeath( ::flixel::FlxObject Tile, ::flixel::FlxObject Particle){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_166_falldeath)
HXDLIN( 166)		::flixel::FlxG_obj::camera->fade((int)-16777216,((Float).33),false,this->doneFadeGO_dyn(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,falldeath,(void))

void PlayState_obj::nextlevel( ::flixel::FlxObject Tile, ::flixel::FlxObject Particle){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_174_nextlevel)
HXLINE( 175)		this->_levelSelector = (int)2;
HXLINE( 176)		{
HXLINE( 176)			 ::flixel::FlxState nextState =  ::PlayState_obj::__alloc( HX_CTX ,this->_levelSelector);
HXDLIN( 176)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 176)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,nextlevel,(void))

void PlayState_obj::placeEntities(::String entityName, ::Xml entityData){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_182_placeEntities)
HXLINE( 183)		int x = ::Std_obj::parseInt(entityData->get(HX_("x",78,00,00,00)));
HXLINE( 184)		int y = ::Std_obj::parseInt(entityData->get(HX_("y",79,00,00,00)));
HXLINE( 187)		if ((entityName == HX_("player",61,eb,b8,37))) {
HXLINE( 188)			this->_player->set_x(x);
HXLINE( 189)			this->_player->set_y(y);
            		}
            		else {
HXLINE( 193)			if ((entityName == HX_("coin",91,b5,c4,41))) {
HXLINE( 196)				 ::flixel::group::FlxTypedGroup _hx_tmp = this->_grpCoins;
HXDLIN( 196)				_hx_tmp->add( ::Coin_obj::__alloc( HX_CTX ,(x + (int)4),(y + (int)4))).StaticCast<  ::Coin >();
            			}
            			else {
HXLINE( 200)				if ((entityName == HX_("enemy",48,12,7b,70))) {
HXLINE( 202)					 ::flixel::group::FlxTypedGroup _hx_tmp1 = this->_grpEnemies;
HXDLIN( 202)					_hx_tmp1->add( ::Enemy_obj::__alloc( HX_CTX ,(x + (int)4),y,::Std_obj::parseInt(entityData->get(HX_("etype",9f,89,81,74))))).StaticCast<  ::Enemy >();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,placeEntities,(void))

void PlayState_obj::playerTouchCoin( ::Player P, ::Coin C){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_209_playerTouchCoin)
HXDLIN( 209)		bool _hx_tmp;
HXDLIN( 209)		bool _hx_tmp1;
HXDLIN( 209)		bool _hx_tmp2;
HXDLIN( 209)		if (P->alive) {
HXDLIN( 209)			_hx_tmp2 = P->exists;
            		}
            		else {
HXDLIN( 209)			_hx_tmp2 = false;
            		}
HXDLIN( 209)		if (_hx_tmp2) {
HXDLIN( 209)			_hx_tmp1 = C->alive;
            		}
            		else {
HXDLIN( 209)			_hx_tmp1 = false;
            		}
HXDLIN( 209)		if (_hx_tmp1) {
HXDLIN( 209)			_hx_tmp = C->exists;
            		}
            		else {
HXDLIN( 209)			_hx_tmp = false;
            		}
HXDLIN( 209)		if (_hx_tmp) {
HXLINE( 210)			C->kill();
HXLINE( 211)			this->_sndCoin->play(true,null(),null());
HXLINE( 214)			this->_money++;
HXLINE( 215)			this->_hud->updateHUD(this->_health,this->_money,this->_rage);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,playerTouchCoin,(void))

void PlayState_obj::checkEnemyVision( ::Enemy e){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_223_checkEnemyVision)
HXDLIN( 223)		bool _hx_tmp;
HXDLIN( 223)		 ::flixel::tile::FlxTilemap _hx_tmp1 = this->_mWalls;
HXDLIN( 223)		 ::flixel::math::FlxPoint _hx_tmp2 = e->getMidpoint(null());
HXDLIN( 223)		if (_hx_tmp1->ray(_hx_tmp2,this->_player->getMidpoint(null()),null(),null())) {
HXDLIN( 223)			 ::flixel::tile::FlxTilemap _hx_tmp3 = this->_mPlatf;
HXDLIN( 223)			 ::flixel::math::FlxPoint _hx_tmp4 = e->getMidpoint(null());
HXDLIN( 223)			_hx_tmp = _hx_tmp3->ray(_hx_tmp4,this->_player->getMidpoint(null()),null(),null());
            		}
            		else {
HXDLIN( 223)			_hx_tmp = false;
            		}
HXDLIN( 223)		if (_hx_tmp) {
HXLINE( 225)			e->seesPlayer = true;
HXLINE( 226)			{
HXLINE( 226)				 ::flixel::math::FlxPoint _this = e->playerPos;
HXDLIN( 226)				 ::flixel::math::FlxPoint point = this->_player->getMidpoint(null());
HXDLIN( 226)				_this->set_x(point->x);
HXDLIN( 226)				_this->set_y(point->y);
HXDLIN( 226)				if (point->_weak) {
HXLINE( 226)					point->put();
            				}
            			}
            		}
            		else {
HXLINE( 229)			e->seesPlayer = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,checkEnemyVision,(void))

void PlayState_obj::attackDir( ::Player p, ::Attack a, ::Rage r){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_238_attackDir)
HXLINE( 240)		bool _hx_tmp;
HXDLIN( 240)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 240)		if (_this->keyManager->checkStatus((int)82,_this->status)) {
HXLINE( 240)			_hx_tmp = (this->_rage >= (int)500);
            		}
            		else {
HXLINE( 240)			_hx_tmp = false;
            		}
HXDLIN( 240)		if (_hx_tmp) {
HXLINE( 240)			p->_rageMultp = ((Float)1.2);
HXDLIN( 240)			this->_dmgMultp = (int)2;
HXDLIN( 240)			r->set_exists(true);
HXDLIN( 240)			r->set_alive(true);
            		}
HXLINE( 241)		if ((this->_rage <= (int)0)) {
HXLINE( 241)			p->_rageMultp = (int)1;
HXDLIN( 241)			this->_dmgMultp = (int)1;
HXDLIN( 241)			r->set_exists(false);
HXDLIN( 241)			r->set_alive(false);
            		}
HXLINE( 242)		if ((this->_dmgMultp == (int)2)) {
HXLINE( 242)			this->_rage--;
HXDLIN( 242)			this->_hud->updateHUD(this->_health,this->_money,this->_rage);
HXDLIN( 242)			r->set_x((p->x - (int)11));
HXDLIN( 242)			r->set_y((p->y - (int)8));
            		}
HXLINE( 245)		if ((p->_punchtmr == (int)1)) {
HXLINE( 246)			a->set_alive(true);
HXLINE( 247)			a->set_exists(true);
            		}
HXLINE( 251)		bool _hx_tmp1;
HXDLIN( 251)		if ((p->_punchtmr != (int)0)) {
HXLINE( 251)			bool _hx_tmp2;
HXDLIN( 251)			bool _hx_tmp3;
HXDLIN( 251)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 251)			if (!(_this1->keyManager->checkStatus((int)38,_this1->status))) {
HXLINE( 251)				 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 251)				_hx_tmp3 = !(_this2->keyManager->checkStatus((int)40,_this2->status));
            			}
            			else {
HXLINE( 251)				_hx_tmp3 = false;
            			}
HXDLIN( 251)			if (_hx_tmp3) {
HXLINE( 251)				 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 251)				_hx_tmp2 = !(_this3->keyManager->checkStatus((int)37,_this3->status));
            			}
            			else {
HXLINE( 251)				_hx_tmp2 = false;
            			}
HXDLIN( 251)			if (_hx_tmp2) {
HXLINE( 251)				 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 251)				_hx_tmp1 = !(_this4->keyManager->checkStatus((int)39,_this4->status));
            			}
            			else {
HXLINE( 251)				_hx_tmp1 = false;
            			}
            		}
            		else {
HXLINE( 251)			_hx_tmp1 = true;
            		}
HXDLIN( 251)		if (_hx_tmp1) {
HXLINE( 253)			a->set_alive(false);
HXLINE( 254)			a->set_exists(false);
            		}
HXLINE( 259)		 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 259)		if (_this5->keyManager->checkStatus((int)38,_this5->status)) {
HXLINE( 262)			if ((p->velocity->y == (int)0)) {
HXLINE( 264)				if ((p->_facedir == (int)0)) {
HXLINE( 265)					a->set_y((p->y - (int)6));
HXLINE( 266)					a->set_x((p->x - (int)13));
            				}
HXLINE( 270)				if ((p->_facedir == (int)1)) {
HXLINE( 271)					a->set_y((p->y - (int)6));
HXLINE( 272)					a->set_x((p->x + (int)4));
            				}
HXLINE( 274)				a->scale->set(((Float)0.6),((Float)0.6));
            			}
HXLINE( 278)			if ((p->velocity->y != (int)0)) {
HXLINE( 280)				bool _hx_tmp4;
HXDLIN( 280)				if ((p->_facedir == (int)0)) {
HXLINE( 280)					_hx_tmp4 = (p->velocity->y != (int)0);
            				}
            				else {
HXLINE( 280)					_hx_tmp4 = false;
            				}
HXDLIN( 280)				if (_hx_tmp4) {
HXLINE( 281)					a->set_y((p->y - (int)8));
HXLINE( 282)					a->set_x((p->x - (int)11));
            				}
HXLINE( 286)				bool _hx_tmp5;
HXDLIN( 286)				if ((p->_facedir == (int)1)) {
HXLINE( 286)					_hx_tmp5 = (p->velocity->y != (int)0);
            				}
            				else {
HXLINE( 286)					_hx_tmp5 = false;
            				}
HXDLIN( 286)				if (_hx_tmp5) {
HXLINE( 287)					a->set_y((p->y - (int)8));
HXLINE( 288)					a->set_x((p->x - (int)13));
            				}
HXLINE( 290)				a->scale->set((int)1,((Float)0.6));
            			}
HXLINE( 292)			a->updateHitbox();
            		}
HXLINE( 296)		 ::flixel::input::keyboard::FlxKeyList _this6 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 296)		if (_this6->keyManager->checkStatus((int)40,_this6->status)) {
HXLINE( 299)			bool _hx_tmp6;
HXDLIN( 299)			if ((p->_facedir == (int)0)) {
HXLINE( 299)				_hx_tmp6 = (p->velocity->y != (int)0);
            			}
            			else {
HXLINE( 299)				_hx_tmp6 = false;
            			}
HXDLIN( 299)			if (_hx_tmp6) {
HXLINE( 300)				a->set_y((p->y + (int)15));
HXLINE( 301)				a->set_x((p->x - (int)6));
            			}
HXLINE( 305)			bool _hx_tmp7;
HXDLIN( 305)			if ((p->_facedir == (int)1)) {
HXLINE( 305)				_hx_tmp7 = (p->velocity->y != (int)0);
            			}
            			else {
HXLINE( 305)				_hx_tmp7 = false;
            			}
HXDLIN( 305)			if (_hx_tmp7) {
HXLINE( 306)				a->set_y((p->y + (int)15));
HXLINE( 307)				a->set_x((p->x - (int)2));
            			}
HXLINE( 311)			a->scale->set(((Float)0.6),((Float)0.8));
HXLINE( 312)			a->updateHitbox();
            		}
HXLINE( 316)		 ::flixel::input::keyboard::FlxKeyList _this7 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 316)		if (_this7->keyManager->checkStatus((int)37,_this7->status)) {
HXLINE( 319)			if ((p->velocity->y == (int)0)) {
HXLINE( 321)				a->set_x((p->x - (int)18));
HXLINE( 322)				a->set_y((p->y + (int)5));
            			}
HXLINE( 326)			if ((p->velocity->y != (int)0)) {
HXLINE( 328)				a->set_x((p->x - (int)21));
HXLINE( 329)				a->set_y(p->y);
            			}
HXLINE( 333)			a->scale->set(((Float)0.6),((Float)0.6));
HXLINE( 334)			a->updateHitbox();
            		}
HXLINE( 338)		 ::flixel::input::keyboard::FlxKeyList _this8 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 338)		if (_this8->keyManager->checkStatus((int)39,_this8->status)) {
HXLINE( 341)			if ((p->velocity->y == (int)0)) {
HXLINE( 343)				a->set_x((p->x + (int)10));
HXLINE( 344)				a->set_y((p->y + (int)5));
            			}
HXLINE( 348)			if ((p->velocity->y != (int)0)) {
HXLINE( 350)				a->set_x((p->x + (int)13));
HXLINE( 351)				a->set_y(p->y);
            			}
HXLINE( 354)			a->scale->set(((Float)0.6),((Float)0.6));
HXLINE( 355)			a->updateHitbox();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,attackDir,(void))

void PlayState_obj::playerTouchEnemy( ::Player P, ::Enemy E){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_368_playerTouchEnemy)
HXDLIN( 368)		bool _hx_tmp;
HXDLIN( 368)		bool _hx_tmp1;
HXDLIN( 368)		bool _hx_tmp2;
HXDLIN( 368)		bool _hx_tmp3;
HXDLIN( 368)		bool _hx_tmp4;
HXDLIN( 368)		if (P->alive) {
HXDLIN( 368)			_hx_tmp4 = P->exists;
            		}
            		else {
HXDLIN( 368)			_hx_tmp4 = false;
            		}
HXDLIN( 368)		if (_hx_tmp4) {
HXDLIN( 368)			_hx_tmp3 = E->alive;
            		}
            		else {
HXDLIN( 368)			_hx_tmp3 = false;
            		}
HXDLIN( 368)		if (_hx_tmp3) {
HXDLIN( 368)			_hx_tmp2 = E->exists;
            		}
            		else {
HXDLIN( 368)			_hx_tmp2 = false;
            		}
HXDLIN( 368)		if (_hx_tmp2) {
HXDLIN( 368)			_hx_tmp1 = !(::flixel::effects::FlxFlicker_obj::isFlickering(E));
            		}
            		else {
HXDLIN( 368)			_hx_tmp1 = false;
            		}
HXDLIN( 368)		if (_hx_tmp1) {
HXDLIN( 368)			_hx_tmp = !(::flixel::effects::FlxFlicker_obj::isFlickering(P));
            		}
            		else {
HXDLIN( 368)			_hx_tmp = false;
            		}
HXDLIN( 368)		if (_hx_tmp) {
HXLINE( 371)			this->_health--;
HXLINE( 372)			bool _hx_tmp5;
HXDLIN( 372)			if ((this->_rage < (int)500)) {
HXLINE( 372)				_hx_tmp5 = (this->_dmgMultp == (int)1);
            			}
            			else {
HXLINE( 372)				_hx_tmp5 = false;
            			}
HXDLIN( 372)			if (_hx_tmp5) {
HXLINE( 372)				 ::PlayState _hx_tmp6 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 372)				_hx_tmp6->_rage = (_hx_tmp6->_rage + (int)50);
            			}
HXLINE( 373)			this->_hud->updateHUD(this->_health,this->_money,this->_rage);
HXLINE( 375)			if ((this->_health > (int)0)) {
HXLINE( 377)				::flixel::effects::FlxFlicker_obj::flicker(P,(int)2,((Float)0.04),true,true,null(),null());
HXLINE( 378)				::flixel::FlxG_obj::camera->shake(((Float)0.01),((Float)0.2),null(),null(),null());
            			}
HXLINE( 381)			if ((this->_health == (int)0)) {
HXLINE( 383)				P->kill();
HXLINE( 384)				::flixel::FlxG_obj::camera->fade((int)-16777216,((Float).33),false,this->doneFadeGO_dyn(),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,playerTouchEnemy,(void))

void PlayState_obj::doneFadeGO(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_395_doneFadeGO)
HXDLIN( 395)		 ::flixel::FlxState nextState =  ::GameOverState_obj::__alloc( HX_CTX ,this->_money);
HXDLIN( 395)		if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXDLIN( 395)			::flixel::FlxG_obj::game->_requestedState = nextState;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,doneFadeGO,(void))

void PlayState_obj::playerTouchAttack( ::Attack A, ::Enemy E){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_402_playerTouchAttack)
HXDLIN( 402)		bool _hx_tmp;
HXDLIN( 402)		bool _hx_tmp1;
HXDLIN( 402)		bool _hx_tmp2;
HXDLIN( 402)		bool _hx_tmp3;
HXDLIN( 402)		if (A->alive) {
HXDLIN( 402)			_hx_tmp3 = A->exists;
            		}
            		else {
HXDLIN( 402)			_hx_tmp3 = false;
            		}
HXDLIN( 402)		if (_hx_tmp3) {
HXDLIN( 402)			_hx_tmp2 = E->alive;
            		}
            		else {
HXDLIN( 402)			_hx_tmp2 = false;
            		}
HXDLIN( 402)		if (_hx_tmp2) {
HXDLIN( 402)			_hx_tmp1 = E->exists;
            		}
            		else {
HXDLIN( 402)			_hx_tmp1 = false;
            		}
HXDLIN( 402)		if (_hx_tmp1) {
HXDLIN( 402)			_hx_tmp = !(::flixel::effects::FlxFlicker_obj::isFlickering(E));
            		}
            		else {
HXDLIN( 402)			_hx_tmp = false;
            		}
HXDLIN( 402)		if (_hx_tmp) {
HXLINE( 405)			 ::Enemy E1 = E;
HXDLIN( 405)			E1->ehealth = (E1->ehealth - this->_dmgMultp);
HXLINE( 406)			bool _hx_tmp4;
HXDLIN( 406)			if ((this->_rage < (int)500)) {
HXLINE( 406)				_hx_tmp4 = (this->_dmgMultp == (int)1);
            			}
            			else {
HXLINE( 406)				_hx_tmp4 = false;
            			}
HXDLIN( 406)			if (_hx_tmp4) {
HXLINE( 406)				 ::PlayState _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 406)				_hx_tmp5->_rage = (_hx_tmp5->_rage + (int)50);
            			}
HXLINE( 407)			this->_hud->updateHUD(this->_health,this->_money,this->_rage);
HXLINE( 410)			if ((E->ehealth > (int)0)) {
HXLINE( 412)				::flixel::effects::FlxFlicker_obj::flicker(E,((Float)0.8),((Float)0.04),true,true,null(),null());
HXLINE( 415)				if ((E->facing == (int)1)) {
HXLINE( 415)					 ::Enemy _g = E;
HXDLIN( 415)					_g->set_x((_g->x + (int)15));
            				}
HXLINE( 416)				if ((E->facing == (int)16)) {
HXLINE( 416)					 ::Enemy _g1 = E;
HXDLIN( 416)					_g1->set_x((_g1->x - (int)15));
            				}
HXLINE( 417)				if ((E->facing == (int)4096)) {
HXLINE( 417)					 ::Enemy _g2 = E;
HXDLIN( 417)					_g2->set_y((_g2->y - (int)15));
            				}
HXLINE( 418)				if ((E->facing == (int)256)) {
HXLINE( 418)					 ::Enemy _g3 = E;
HXDLIN( 418)					_g3->set_y((_g3->y + (int)15));
            				}
HXLINE( 421)				E->last->set(E->x,E->y);
HXLINE( 423)				this->_combatSound->play(true,null(),null());
HXLINE( 424)				E->set_alive(false);
HXLINE( 425)				E->speed = (int)0;
HXLINE( 426)				E->acceleration->set_x((int)0);
HXLINE( 427)				E->velocity->set_x((int)0);
            			}
HXLINE( 432)			bool _hx_tmp6;
HXDLIN( 432)			if ((E->ehealth <= (int)0)) {
HXLINE( 432)				_hx_tmp6 = E->alive;
            			}
            			else {
HXLINE( 432)				_hx_tmp6 = false;
            			}
HXDLIN( 432)			if (_hx_tmp6) {
HXLINE( 434)				E->set_alive(false);
HXLINE( 435)				 ::flixel::group::FlxTypedGroup _hx_tmp7 = this->_grpCoins;
HXDLIN( 435)				Float _hx_tmp8 = (E->x + (int)4);
HXDLIN( 435)				_hx_tmp7->add( ::Coin_obj::__alloc( HX_CTX ,_hx_tmp8,(E->y + (int)4))).StaticCast<  ::Coin >();
HXLINE( 436)				E->kill();
HXLINE( 437)				this->_deathSound->play(true,null(),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,playerTouchAttack,(void))

void PlayState_obj::enemyNoStun( ::Enemy E){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_446_enemyNoStun)
HXDLIN( 446)		if (!(::flixel::effects::FlxFlicker_obj::isFlickering(E))) {
HXLINE( 447)			E->set_alive(true);
HXLINE( 448)			E->speed = (int)80;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,enemyNoStun,(void))

void PlayState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_456_update)
HXLINE( 457)		this->super::update(elapsed);
HXLINE( 460)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->_player) ),( ( ::flixel::FlxBasic)(this->_mWalls) ),null(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 461)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->_player) ),( ( ::flixel::FlxBasic)(this->_mPlatf) ),null(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 464)		::flixel::FlxG_obj::overlap(this->_player,this->_grpCoins,this->playerTouchCoin_dyn(),null());
HXLINE( 467)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->_grpEnemies) ),( ( ::flixel::FlxBasic)(this->_mWalls) ),null(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 468)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->_grpEnemies) ),( ( ::flixel::FlxBasic)(this->_mPlatf) ),null(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 469)		this->_grpEnemies->forEachAlive(this->checkEnemyVision_dyn(),null());
HXLINE( 472)		::flixel::FlxG_obj::overlap(this->_player,this->_grpEnemies,this->playerTouchEnemy_dyn(),null());
HXLINE( 473)		::flixel::FlxG_obj::overlap(this->_attack,this->_grpEnemies,this->playerTouchAttack_dyn(),null());
HXLINE( 474)		this->_grpEnemies->forEachDead(this->enemyNoStun_dyn(),null());
HXLINE( 476)		this->attackDir(this->_player,this->_attack,this->_classrage);
            	}



hx::ObjectPtr< PlayState_obj > PlayState_obj::__new(int Levelselector) {
	hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(Levelselector);
	return __this;
}

hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(hx::Ctx *_hx_ctx,int Levelselector) {
	PlayState_obj *__this = (PlayState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(Levelselector);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(_player,"_player");
	HX_MARK_MEMBER_NAME(_attack,"_attack");
	HX_MARK_MEMBER_NAME(_classrage,"_classrage");
	HX_MARK_MEMBER_NAME(_map,"_map");
	HX_MARK_MEMBER_NAME(_mWalls,"_mWalls");
	HX_MARK_MEMBER_NAME(_mBack,"_mBack");
	HX_MARK_MEMBER_NAME(_mPlatf,"_mPlatf");
	HX_MARK_MEMBER_NAME(_grpCoins,"_grpCoins");
	HX_MARK_MEMBER_NAME(_grpEnemies,"_grpEnemies");
	HX_MARK_MEMBER_NAME(_hud,"_hud");
	HX_MARK_MEMBER_NAME(_money,"_money");
	HX_MARK_MEMBER_NAME(_health,"_health");
	HX_MARK_MEMBER_NAME(_rage,"_rage");
	HX_MARK_MEMBER_NAME(_combatSound,"_combatSound");
	HX_MARK_MEMBER_NAME(_deathSound,"_deathSound");
	HX_MARK_MEMBER_NAME(mA,"mA");
	HX_MARK_MEMBER_NAME(_sndCoin,"_sndCoin");
	HX_MARK_MEMBER_NAME(_levelSelector,"_levelSelector");
	HX_MARK_MEMBER_NAME(_dmgMultp,"_dmgMultp");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_player,"_player");
	HX_VISIT_MEMBER_NAME(_attack,"_attack");
	HX_VISIT_MEMBER_NAME(_classrage,"_classrage");
	HX_VISIT_MEMBER_NAME(_map,"_map");
	HX_VISIT_MEMBER_NAME(_mWalls,"_mWalls");
	HX_VISIT_MEMBER_NAME(_mBack,"_mBack");
	HX_VISIT_MEMBER_NAME(_mPlatf,"_mPlatf");
	HX_VISIT_MEMBER_NAME(_grpCoins,"_grpCoins");
	HX_VISIT_MEMBER_NAME(_grpEnemies,"_grpEnemies");
	HX_VISIT_MEMBER_NAME(_hud,"_hud");
	HX_VISIT_MEMBER_NAME(_money,"_money");
	HX_VISIT_MEMBER_NAME(_health,"_health");
	HX_VISIT_MEMBER_NAME(_rage,"_rage");
	HX_VISIT_MEMBER_NAME(_combatSound,"_combatSound");
	HX_VISIT_MEMBER_NAME(_deathSound,"_deathSound");
	HX_VISIT_MEMBER_NAME(mA,"mA");
	HX_VISIT_MEMBER_NAME(_sndCoin,"_sndCoin");
	HX_VISIT_MEMBER_NAME(_levelSelector,"_levelSelector");
	HX_VISIT_MEMBER_NAME(_dmgMultp,"_dmgMultp");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PlayState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"mA") ) { return hx::Val( mA ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_map") ) { return hx::Val( _map ); }
		if (HX_FIELD_EQ(inName,"_hud") ) { return hx::Val( _hud ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_rage") ) { return hx::Val( _rage ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_mBack") ) { return hx::Val( _mBack ); }
		if (HX_FIELD_EQ(inName,"_money") ) { return hx::Val( _money ); }
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_player") ) { return hx::Val( _player ); }
		if (HX_FIELD_EQ(inName,"_attack") ) { return hx::Val( _attack ); }
		if (HX_FIELD_EQ(inName,"_mWalls") ) { return hx::Val( _mWalls ); }
		if (HX_FIELD_EQ(inName,"_mPlatf") ) { return hx::Val( _mPlatf ); }
		if (HX_FIELD_EQ(inName,"_health") ) { return hx::Val( _health ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_sndCoin") ) { return hx::Val( _sndCoin ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_grpCoins") ) { return hx::Val( _grpCoins ); }
		if (HX_FIELD_EQ(inName,"_dmgMultp") ) { return hx::Val( _dmgMultp ); }
		if (HX_FIELD_EQ(inName,"falldeath") ) { return hx::Val( falldeath_dyn() ); }
		if (HX_FIELD_EQ(inName,"nextlevel") ) { return hx::Val( nextlevel_dyn() ); }
		if (HX_FIELD_EQ(inName,"attackDir") ) { return hx::Val( attackDir_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_classrage") ) { return hx::Val( _classrage ); }
		if (HX_FIELD_EQ(inName,"doneFadeGO") ) { return hx::Val( doneFadeGO_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_grpEnemies") ) { return hx::Val( _grpEnemies ); }
		if (HX_FIELD_EQ(inName,"_deathSound") ) { return hx::Val( _deathSound ); }
		if (HX_FIELD_EQ(inName,"enemyNoStun") ) { return hx::Val( enemyNoStun_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_combatSound") ) { return hx::Val( _combatSound ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"placeEntities") ) { return hx::Val( placeEntities_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_levelSelector") ) { return hx::Val( _levelSelector ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"playerTouchCoin") ) { return hx::Val( playerTouchCoin_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"checkEnemyVision") ) { return hx::Val( checkEnemyVision_dyn() ); }
		if (HX_FIELD_EQ(inName,"playerTouchEnemy") ) { return hx::Val( playerTouchEnemy_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"playerTouchAttack") ) { return hx::Val( playerTouchAttack_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PlayState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"mA") ) { mA=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_map") ) { _map=inValue.Cast<  ::flixel::addons::editors::ogmo::FlxOgmoLoader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_hud") ) { _hud=inValue.Cast<  ::HUD >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_rage") ) { _rage=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_mBack") ) { _mBack=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_money") ) { _money=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_player") ) { _player=inValue.Cast<  ::Player >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_attack") ) { _attack=inValue.Cast<  ::Attack >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_mWalls") ) { _mWalls=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_mPlatf") ) { _mPlatf=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_health") ) { _health=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_sndCoin") ) { _sndCoin=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_grpCoins") ) { _grpCoins=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_dmgMultp") ) { _dmgMultp=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_classrage") ) { _classrage=inValue.Cast<  ::Rage >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_grpEnemies") ) { _grpEnemies=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_deathSound") ) { _deathSound=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_combatSound") ) { _combatSound=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_levelSelector") ) { _levelSelector=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_player","\x00","\xfd","\x2f","\xa6"));
	outFields->push(HX_HCSTRING("_attack","\x67","\x0d","\x87","\x4e"));
	outFields->push(HX_HCSTRING("_classrage","\x86","\xb7","\xab","\x4f"));
	outFields->push(HX_HCSTRING("_map","\x9d","\x4f","\x1e","\x3f"));
	outFields->push(HX_HCSTRING("_mWalls","\x1b","\xe2","\xa9","\x5b"));
	outFields->push(HX_HCSTRING("_mBack","\x75","\x88","\x7e","\xea"));
	outFields->push(HX_HCSTRING("_mPlatf","\x89","\xd9","\x18","\x5b"));
	outFields->push(HX_HCSTRING("_grpCoins","\xfc","\xc6","\xf0","\x74"));
	outFields->push(HX_HCSTRING("_grpEnemies","\x60","\x48","\x72","\xc6"));
	outFields->push(HX_HCSTRING("_hud","\xb8","\x95","\x1a","\x3f"));
	outFields->push(HX_HCSTRING("_money","\x81","\x01","\x47","\x08"));
	outFields->push(HX_HCSTRING("_health","\x3b","\x3a","\x7d","\x6b"));
	outFields->push(HX_HCSTRING("_rage","\x6c","\x63","\xb5","\xfe"));
	outFields->push(HX_HCSTRING("_combatSound","\xfc","\x5d","\x72","\x89"));
	outFields->push(HX_HCSTRING("_deathSound","\x1a","\x9e","\xcd","\x55"));
	outFields->push(HX_HCSTRING("mA","\x34","\x5f","\x00","\x00"));
	outFields->push(HX_HCSTRING("_sndCoin","\x1b","\x47","\xce","\xa3"));
	outFields->push(HX_HCSTRING("_levelSelector","\x04","\x19","\xeb","\x68"));
	outFields->push(HX_HCSTRING("_dmgMultp","\x41","\x40","\x33","\x26"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::Player*/ ,(int)offsetof(PlayState_obj,_player),HX_HCSTRING("_player","\x00","\xfd","\x2f","\xa6")},
	{hx::fsObject /*::Attack*/ ,(int)offsetof(PlayState_obj,_attack),HX_HCSTRING("_attack","\x67","\x0d","\x87","\x4e")},
	{hx::fsObject /*::Rage*/ ,(int)offsetof(PlayState_obj,_classrage),HX_HCSTRING("_classrage","\x86","\xb7","\xab","\x4f")},
	{hx::fsObject /*::flixel::addons::editors::ogmo::FlxOgmoLoader*/ ,(int)offsetof(PlayState_obj,_map),HX_HCSTRING("_map","\x9d","\x4f","\x1e","\x3f")},
	{hx::fsObject /*::flixel::tile::FlxTilemap*/ ,(int)offsetof(PlayState_obj,_mWalls),HX_HCSTRING("_mWalls","\x1b","\xe2","\xa9","\x5b")},
	{hx::fsObject /*::flixel::tile::FlxTilemap*/ ,(int)offsetof(PlayState_obj,_mBack),HX_HCSTRING("_mBack","\x75","\x88","\x7e","\xea")},
	{hx::fsObject /*::flixel::tile::FlxTilemap*/ ,(int)offsetof(PlayState_obj,_mPlatf),HX_HCSTRING("_mPlatf","\x89","\xd9","\x18","\x5b")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,_grpCoins),HX_HCSTRING("_grpCoins","\xfc","\xc6","\xf0","\x74")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,_grpEnemies),HX_HCSTRING("_grpEnemies","\x60","\x48","\x72","\xc6")},
	{hx::fsObject /*::HUD*/ ,(int)offsetof(PlayState_obj,_hud),HX_HCSTRING("_hud","\xb8","\x95","\x1a","\x3f")},
	{hx::fsInt,(int)offsetof(PlayState_obj,_money),HX_HCSTRING("_money","\x81","\x01","\x47","\x08")},
	{hx::fsInt,(int)offsetof(PlayState_obj,_health),HX_HCSTRING("_health","\x3b","\x3a","\x7d","\x6b")},
	{hx::fsInt,(int)offsetof(PlayState_obj,_rage),HX_HCSTRING("_rage","\x6c","\x63","\xb5","\xfe")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(PlayState_obj,_combatSound),HX_HCSTRING("_combatSound","\xfc","\x5d","\x72","\x89")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(PlayState_obj,_deathSound),HX_HCSTRING("_deathSound","\x1a","\x9e","\xcd","\x55")},
	{hx::fsFloat,(int)offsetof(PlayState_obj,mA),HX_HCSTRING("mA","\x34","\x5f","\x00","\x00")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(PlayState_obj,_sndCoin),HX_HCSTRING("_sndCoin","\x1b","\x47","\xce","\xa3")},
	{hx::fsInt,(int)offsetof(PlayState_obj,_levelSelector),HX_HCSTRING("_levelSelector","\x04","\x19","\xeb","\x68")},
	{hx::fsInt,(int)offsetof(PlayState_obj,_dmgMultp),HX_HCSTRING("_dmgMultp","\x41","\x40","\x33","\x26")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PlayState_obj_sStaticStorageInfo = 0;
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_HCSTRING("_player","\x00","\xfd","\x2f","\xa6"),
	HX_HCSTRING("_attack","\x67","\x0d","\x87","\x4e"),
	HX_HCSTRING("_classrage","\x86","\xb7","\xab","\x4f"),
	HX_HCSTRING("_map","\x9d","\x4f","\x1e","\x3f"),
	HX_HCSTRING("_mWalls","\x1b","\xe2","\xa9","\x5b"),
	HX_HCSTRING("_mBack","\x75","\x88","\x7e","\xea"),
	HX_HCSTRING("_mPlatf","\x89","\xd9","\x18","\x5b"),
	HX_HCSTRING("_grpCoins","\xfc","\xc6","\xf0","\x74"),
	HX_HCSTRING("_grpEnemies","\x60","\x48","\x72","\xc6"),
	HX_HCSTRING("_hud","\xb8","\x95","\x1a","\x3f"),
	HX_HCSTRING("_money","\x81","\x01","\x47","\x08"),
	HX_HCSTRING("_health","\x3b","\x3a","\x7d","\x6b"),
	HX_HCSTRING("_rage","\x6c","\x63","\xb5","\xfe"),
	HX_HCSTRING("_combatSound","\xfc","\x5d","\x72","\x89"),
	HX_HCSTRING("_deathSound","\x1a","\x9e","\xcd","\x55"),
	HX_HCSTRING("mA","\x34","\x5f","\x00","\x00"),
	HX_HCSTRING("_sndCoin","\x1b","\x47","\xce","\xa3"),
	HX_HCSTRING("_levelSelector","\x04","\x19","\xeb","\x68"),
	HX_HCSTRING("_dmgMultp","\x41","\x40","\x33","\x26"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("falldeath","\xd9","\xb4","\x04","\x49"),
	HX_HCSTRING("nextlevel","\xb1","\xbf","\x7a","\x86"),
	HX_HCSTRING("placeEntities","\x28","\xe6","\x91","\x17"),
	HX_HCSTRING("playerTouchCoin","\x4f","\x45","\x8d","\xf2"),
	HX_HCSTRING("checkEnemyVision","\x68","\x24","\x16","\x8c"),
	HX_HCSTRING("attackDir","\x65","\x86","\x45","\xc0"),
	HX_HCSTRING("playerTouchEnemy","\xca","\x48","\x30","\x6f"),
	HX_HCSTRING("doneFadeGO","\xc6","\xfc","\xa7","\xa8"),
	HX_HCSTRING("playerTouchAttack","\x06","\x77","\xea","\xbf"),
	HX_HCSTRING("enemyNoStun","\x83","\xa2","\xa3","\x03"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
};

#endif

hx::Class PlayState_obj::__mClass;

void PlayState_obj::__register()
{
	hx::Object *dummy = new PlayState_obj;
	PlayState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("PlayState","\x5d","\x83","\xc2","\x46");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

