// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Rage
#include <Rage.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1598cf8cbbcc4b77_16_new,"Rage","new",0x88c0ef1f,"Rage.new","Rage.hx",16,0xaba99931)
static const int _hx_array_data_367d73ad_1[] = {
	(int)0,(int)1,(int)2,(int)3,(int)4,(int)5,(int)6,(int)7,(int)8,(int)9,(int)10,(int)11,(int)12,(int)13,
};
HX_LOCAL_STACK_FRAME(_hx_pos_1598cf8cbbcc4b77_27_update,"Rage","update",0x935ee8aa,"Rage.update","Rage.hx",27,0xaba99931)

void Rage_obj::__construct( ::Dynamic __o_X, ::Dynamic __o_Y){
 ::Dynamic X = __o_X.Default(0);
 ::Dynamic Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_1598cf8cbbcc4b77_16_new)
HXLINE(  17)		super::__construct(X,Y,null());
HXLINE(  18)		this->loadGraphic(HX_("assets/images/rage.png",f3,29,3c,6d),true,(int)32,(int)40,null(),null());
HXLINE(  19)		this->animation->add(HX_("rge",10,db,56,00),::Array_obj< int >::fromData( _hx_array_data_367d73ad_1,14),(int)10,true,null(),null());
HXLINE(  20)		this->animation->play(HX_("rge",10,db,56,00),null(),null(),null());
            	}

Dynamic Rage_obj::__CreateEmpty() { return new Rage_obj; }

void *Rage_obj::_hx_vtable = 0;

Dynamic Rage_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Rage_obj > _hx_result = new Rage_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Rage_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x367d73ad;
	}
}

void Rage_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_1598cf8cbbcc4b77_27_update)
HXDLIN(  27)		this->super::update(elapsed);
            	}



hx::ObjectPtr< Rage_obj > Rage_obj::__new( ::Dynamic __o_X, ::Dynamic __o_Y) {
	hx::ObjectPtr< Rage_obj > __this = new Rage_obj();
	__this->__construct(__o_X,__o_Y);
	return __this;
}

hx::ObjectPtr< Rage_obj > Rage_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic __o_X, ::Dynamic __o_Y) {
	Rage_obj *__this = (Rage_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Rage_obj), true, "Rage"));
	*(void **)__this = Rage_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y);
	return __this;
}

Rage_obj::Rage_obj()
{
}

hx::Val Rage_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Rage_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Rage_obj_sStaticStorageInfo = 0;
#endif

static ::String Rage_obj_sMemberFields[] = {
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void Rage_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Rage_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Rage_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Rage_obj::__mClass,"__mClass");
};

#endif

hx::Class Rage_obj::__mClass;

void Rage_obj::__register()
{
	hx::Object *dummy = new Rage_obj;
	Rage_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Rage","\xad","\x73","\x7d","\x36");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Rage_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Rage_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Rage_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Rage_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Rage_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Rage_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

