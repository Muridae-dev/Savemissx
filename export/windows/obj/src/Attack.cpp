// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Attack
#include <Attack.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7e3a7852c28e0258_16_new,"Attack","new",0x64ba24da,"Attack.new","Attack.hx",16,0x6207b3d6)
HX_LOCAL_STACK_FRAME(_hx_pos_7e3a7852c28e0258_26_update,"Attack","update",0x3cefb9cf,"Attack.update","Attack.hx",26,0x6207b3d6)

void Attack_obj::__construct( ::Dynamic __o_X, ::Dynamic __o_Y){
 ::Dynamic X = __o_X.Default(0);
 ::Dynamic Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_7e3a7852c28e0258_16_new)
HXLINE(  17)		super::__construct(X,Y,null());
HXLINE(  18)		this->makeGraphic((int)32,(int)32,(int)-65536,true,null());
HXLINE(  19)		this->set_alpha(((Float)0.2));
            	}

Dynamic Attack_obj::__CreateEmpty() { return new Attack_obj; }

void *Attack_obj::_hx_vtable = 0;

Dynamic Attack_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Attack_obj > _hx_result = new Attack_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Attack_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x14a46fe8) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x14a46fe8;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x2e105115;
	}
}

void Attack_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_7e3a7852c28e0258_26_update)
HXDLIN(  26)		this->super::update(elapsed);
            	}



hx::ObjectPtr< Attack_obj > Attack_obj::__new( ::Dynamic __o_X, ::Dynamic __o_Y) {
	hx::ObjectPtr< Attack_obj > __this = new Attack_obj();
	__this->__construct(__o_X,__o_Y);
	return __this;
}

hx::ObjectPtr< Attack_obj > Attack_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic __o_X, ::Dynamic __o_Y) {
	Attack_obj *__this = (Attack_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Attack_obj), true, "Attack"));
	*(void **)__this = Attack_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y);
	return __this;
}

Attack_obj::Attack_obj()
{
}

hx::Val Attack_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Attack_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Attack_obj_sStaticStorageInfo = 0;
#endif

static ::String Attack_obj_sMemberFields[] = {
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void Attack_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Attack_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Attack_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Attack_obj::__mClass,"__mClass");
};

#endif

hx::Class Attack_obj::__mClass;

void Attack_obj::__register()
{
	hx::Object *dummy = new Attack_obj;
	Attack_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Attack","\xe8","\x6f","\xa4","\x14");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Attack_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Attack_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Attack_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Attack_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Attack_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Attack_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

