// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_GameOverState
#include <GameOverState.h>
#endif
#ifndef INCLUDED_MenuState
#include <MenuState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_ui__FlxButton_FlxButtonEvent
#include <flixel/ui/_FlxButton/FlxButtonEvent.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f1e39ddd2cdbc587_12_new,"GameOverState","new",0x0e4d841d,"GameOverState.new","GameOverState.hx",12,0xd0ff2df3)
HX_LOCAL_STACK_FRAME(_hx_pos_f1e39ddd2cdbc587_37_create,"GameOverState","create",0x7dd4e75f,"GameOverState.create","GameOverState.hx",37,0xd0ff2df3)
HX_LOCAL_STACK_FRAME(_hx_pos_f1e39ddd2cdbc587_92_checkHiScore,"GameOverState","checkHiScore",0xcd71294c,"GameOverState.checkHiScore","GameOverState.hx",92,0xd0ff2df3)
HX_LOCAL_STACK_FRAME(_hx_pos_f1e39ddd2cdbc587_122_goMainMenu,"GameOverState","goMainMenu",0x626126a3,"GameOverState.goMainMenu","GameOverState.hx",122,0xd0ff2df3)
HX_LOCAL_STACK_FRAME(_hx_pos_f1e39ddd2cdbc587_120_goMainMenu,"GameOverState","goMainMenu",0x626126a3,"GameOverState.goMainMenu","GameOverState.hx",120,0xd0ff2df3)

void GameOverState_obj::__construct(int Score){
            	HX_STACKFRAME(&_hx_pos_f1e39ddd2cdbc587_12_new)
HXLINE(  14)		this->_score = (int)0;
HXLINE(  30)		this->_score = Score;
HXLINE(  31)		super::__construct(null());
            	}

Dynamic GameOverState_obj::__CreateEmpty() { return new GameOverState_obj; }

void *GameOverState_obj::_hx_vtable = 0;

Dynamic GameOverState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GameOverState_obj > _hx_result = new GameOverState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool GameOverState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2335d9a7) {
		if (inClassId<=(int)0x08626ddf) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x08626ddf;
		} else {
			return inClassId==(int)0x2335d9a7;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x3634c52c;
	}
}

void GameOverState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_f1e39ddd2cdbc587_37_create)
HXLINE(  39)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE(  43)		this->_txtTitle =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)20,(int)0,HX_("GAME OVER!",9f,99,88,ce),(int)22,null());
HXLINE(  44)		this->_txtTitle->set_alignment(HX_("center",d5,25,db,05));
HXLINE(  45)		this->_txtTitle->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(  46)		this->add(this->_txtTitle);
HXLINE(  49)		this->_txtMessage =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(((Float)::flixel::FlxG_obj::height / (Float)(int)2) - (int)18),(int)0,HX_("FINAL SCORE:",52,98,57,05),(int)8,null());
HXLINE(  50)		this->_txtMessage->set_alignment(HX_("center",d5,25,db,05));
HXLINE(  51)		this->_txtMessage->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(  52)		this->add(this->_txtMessage);
HXLINE(  55)		this->_sprScore =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(((Float)::flixel::FlxG_obj::width / (Float)(int)2) - (int)8),(int)0,HX_("assets/images/coin.png",f7,e9,c5,54));
HXLINE(  56)		this->_sprScore->screenCenter(::flixel::util::FlxAxes_obj::Y_dyn());
HXLINE(  57)		this->add(this->_sprScore);
HXLINE(  60)		Float _hx_tmp = ((Float)::flixel::FlxG_obj::height / (Float)(int)2);
HXDLIN(  60)		this->_txtScore =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp,(int)0,(int)0,::Std_obj::string(this->_score),(int)8,null());
HXLINE(  61)		this->_txtScore->screenCenter(::flixel::util::FlxAxes_obj::Y_dyn());
HXLINE(  62)		this->add(this->_txtScore);
HXLINE(  65)		int _hiScore = this->checkHiScore(this->_score);
HXLINE(  67)		Float _hx_tmp1 = (((Float)::flixel::FlxG_obj::height / (Float)(int)2) + (int)10);
HXDLIN(  67)		this->_txtHiScore =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,_hx_tmp1,(int)0,(HX_("HI-SCORE: ",cc,45,15,42) + _hiScore),(int)8,null());
HXLINE(  68)		this->_txtHiScore->set_alignment(HX_("center",d5,25,db,05));
HXLINE(  69)		this->_txtHiScore->screenCenter(::flixel::util::FlxAxes_obj::Y_dyn());
HXLINE(  70)		this->add(this->_txtHiScore);
HXLINE(  72)		this->_btnMainMenu =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(int)0,(::flixel::FlxG_obj::height - (int)32),HX_("MAIN MENU",e6,2e,cd,a3),this->goMainMenu_dyn());
HXLINE(  73)		this->_btnMainMenu->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(  74)		this->_btnMainMenu->onUp->sound = ::flixel::FlxG_obj::sound->load(HX_("assets/sounds/select.wav",99,31,ec,2e),null(),null(),null(),null(),null(),null(),null());
HXLINE(  75)		this->add(this->_btnMainMenu);
HXLINE(  77)		::flixel::FlxG_obj::camera->fade((int)-16777216,((Float).33),true,null(),null());
HXLINE(  79)		this->super::create();
            	}


int GameOverState_obj::checkHiScore(int Score){
            	HX_GC_STACKFRAME(&_hx_pos_f1e39ddd2cdbc587_92_checkHiScore)
HXLINE(  93)		int _hi = Score;
HXLINE(  94)		 ::flixel::util::FlxSave _save =  ::flixel::util::FlxSave_obj::__alloc( HX_CTX );
HXLINE(  95)		if (_save->bind(HX_("Savemissx",7f,c1,be,a5))) {
HXLINE(  98)			bool _hx_tmp;
HXDLIN(  98)			if (hx::IsNotNull(  ::Dynamic(_save->data->__Field(HX_("hiscore",b1,94,0a,59),hx::paccDynamic)) )) {
HXLINE(  98)				_hx_tmp = hx::IsGreater(  ::Dynamic(_save->data->__Field(HX_("hiscore",b1,94,0a,59),hx::paccDynamic)),_hi );
            			}
            			else {
HXLINE(  98)				_hx_tmp = false;
            			}
HXDLIN(  98)			if (_hx_tmp) {
HXLINE( 100)				_hi = ( (int)(_save->data->__Field(HX_("hiscore",b1,94,0a,59),hx::paccDynamic)) );
            			}
            			else {
HXLINE( 106)				_save->data->__SetField(HX_("hiscore",b1,94,0a,59),_hi,hx::paccDynamic);
            			}
            		}
HXLINE( 111)		_save->close(null(),null());
HXLINE( 112)		return _hi;
            	}


HX_DEFINE_DYNAMIC_FUNC1(GameOverState_obj,checkHiScore,return )

void GameOverState_obj::goMainMenu(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_f1e39ddd2cdbc587_122_goMainMenu)
HXLINE( 122)			 ::flixel::FlxState nextState =  ::MenuState_obj::__alloc( HX_CTX ,null());
HXDLIN( 122)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 122)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_f1e39ddd2cdbc587_120_goMainMenu)
HXDLIN( 120)		::flixel::FlxG_obj::camera->fade((int)-16777216,((Float).33),false, ::Dynamic(new _hx_Closure_0()),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameOverState_obj,goMainMenu,(void))


hx::ObjectPtr< GameOverState_obj > GameOverState_obj::__new(int Score) {
	hx::ObjectPtr< GameOverState_obj > __this = new GameOverState_obj();
	__this->__construct(Score);
	return __this;
}

hx::ObjectPtr< GameOverState_obj > GameOverState_obj::__alloc(hx::Ctx *_hx_ctx,int Score) {
	GameOverState_obj *__this = (GameOverState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GameOverState_obj), true, "GameOverState"));
	*(void **)__this = GameOverState_obj::_hx_vtable;
	__this->__construct(Score);
	return __this;
}

GameOverState_obj::GameOverState_obj()
{
}

void GameOverState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GameOverState);
	HX_MARK_MEMBER_NAME(_score,"_score");
	HX_MARK_MEMBER_NAME(_txtTitle,"_txtTitle");
	HX_MARK_MEMBER_NAME(_txtMessage,"_txtMessage");
	HX_MARK_MEMBER_NAME(_sprScore,"_sprScore");
	HX_MARK_MEMBER_NAME(_txtScore,"_txtScore");
	HX_MARK_MEMBER_NAME(_txtHiScore,"_txtHiScore");
	HX_MARK_MEMBER_NAME(_btnMainMenu,"_btnMainMenu");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void GameOverState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_score,"_score");
	HX_VISIT_MEMBER_NAME(_txtTitle,"_txtTitle");
	HX_VISIT_MEMBER_NAME(_txtMessage,"_txtMessage");
	HX_VISIT_MEMBER_NAME(_sprScore,"_sprScore");
	HX_VISIT_MEMBER_NAME(_txtScore,"_txtScore");
	HX_VISIT_MEMBER_NAME(_txtHiScore,"_txtHiScore");
	HX_VISIT_MEMBER_NAME(_btnMainMenu,"_btnMainMenu");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val GameOverState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_score") ) { return hx::Val( _score ); }
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_txtTitle") ) { return hx::Val( _txtTitle ); }
		if (HX_FIELD_EQ(inName,"_sprScore") ) { return hx::Val( _sprScore ); }
		if (HX_FIELD_EQ(inName,"_txtScore") ) { return hx::Val( _txtScore ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"goMainMenu") ) { return hx::Val( goMainMenu_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_txtMessage") ) { return hx::Val( _txtMessage ); }
		if (HX_FIELD_EQ(inName,"_txtHiScore") ) { return hx::Val( _txtHiScore ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_btnMainMenu") ) { return hx::Val( _btnMainMenu ); }
		if (HX_FIELD_EQ(inName,"checkHiScore") ) { return hx::Val( checkHiScore_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val GameOverState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_score") ) { _score=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_txtTitle") ) { _txtTitle=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_sprScore") ) { _sprScore=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_txtScore") ) { _txtScore=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_txtMessage") ) { _txtMessage=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_txtHiScore") ) { _txtHiScore=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_btnMainMenu") ) { _btnMainMenu=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GameOverState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_score","\x93","\xba","\xc0","\x74"));
	outFields->push(HX_HCSTRING("_txtTitle","\x67","\xb8","\x4f","\xb5"));
	outFields->push(HX_HCSTRING("_txtMessage","\x56","\x6a","\xaf","\x27"));
	outFields->push(HX_HCSTRING("_sprScore","\x3c","\x35","\x59","\xcb"));
	outFields->push(HX_HCSTRING("_txtScore","\x21","\x16","\xee","\x1d"));
	outFields->push(HX_HCSTRING("_txtHiScore","\x20","\x39","\xd6","\x79"));
	outFields->push(HX_HCSTRING("_btnMainMenu","\xf5","\xa2","\x35","\xfb"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo GameOverState_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(GameOverState_obj,_score),HX_HCSTRING("_score","\x93","\xba","\xc0","\x74")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(GameOverState_obj,_txtTitle),HX_HCSTRING("_txtTitle","\x67","\xb8","\x4f","\xb5")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(GameOverState_obj,_txtMessage),HX_HCSTRING("_txtMessage","\x56","\x6a","\xaf","\x27")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(GameOverState_obj,_sprScore),HX_HCSTRING("_sprScore","\x3c","\x35","\x59","\xcb")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(GameOverState_obj,_txtScore),HX_HCSTRING("_txtScore","\x21","\x16","\xee","\x1d")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(GameOverState_obj,_txtHiScore),HX_HCSTRING("_txtHiScore","\x20","\x39","\xd6","\x79")},
	{hx::fsObject /*::flixel::ui::FlxButton*/ ,(int)offsetof(GameOverState_obj,_btnMainMenu),HX_HCSTRING("_btnMainMenu","\xf5","\xa2","\x35","\xfb")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *GameOverState_obj_sStaticStorageInfo = 0;
#endif

static ::String GameOverState_obj_sMemberFields[] = {
	HX_HCSTRING("_score","\x93","\xba","\xc0","\x74"),
	HX_HCSTRING("_txtTitle","\x67","\xb8","\x4f","\xb5"),
	HX_HCSTRING("_txtMessage","\x56","\x6a","\xaf","\x27"),
	HX_HCSTRING("_sprScore","\x3c","\x35","\x59","\xcb"),
	HX_HCSTRING("_txtScore","\x21","\x16","\xee","\x1d"),
	HX_HCSTRING("_txtHiScore","\x20","\x39","\xd6","\x79"),
	HX_HCSTRING("_btnMainMenu","\xf5","\xa2","\x35","\xfb"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("checkHiScore","\xa9","\xbc","\xbe","\xd9"),
	HX_HCSTRING("goMainMenu","\xc0","\x38","\x30","\x4f"),
	::String(null()) };

static void GameOverState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GameOverState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GameOverState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GameOverState_obj::__mClass,"__mClass");
};

#endif

hx::Class GameOverState_obj::__mClass;

void GameOverState_obj::__register()
{
	hx::Object *dummy = new GameOverState_obj;
	GameOverState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("GameOverState","\xab","\x31","\xa0","\x87");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GameOverState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GameOverState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GameOverState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GameOverState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GameOverState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GameOverState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

